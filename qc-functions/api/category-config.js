const { getSheetsClient } = require('../services/google-auth');

const SHEETS_ID = '1ez_Dox16jf9lr5TEsLL5BEOfKZDNGkVD31YSBtx3Qa8';

// üî• UPDATED: ‡∏î‡∏∂‡∏á Dynamic Fields ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡πÉ‡∏î‡πÜ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà)
async function getDynamicFields(subCategory) {
  try {
    console.log(`Getting dynamic fields for sub category: ${subCategory}`);
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ logic ‡πÄ‡∏î‡∏¥‡∏° (Hybrid Approach)
    if (subCategory === '‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å') {
      return {
        useExisting: true,
        category: '‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å',
        subCategory: '‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å', // üî• NEW: ‡πÄ‡∏û‡∏¥‡πà‡∏° subCategory
        fields: [
          { 
            name: '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£', 
            type: 'combobox', 
            required: true,
            placeholder: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô A, B, C'
          },
          { 
            name: '‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå', 
            type: 'combobox', 
            required: true,
            placeholder: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å ‡πÄ‡∏ä‡πà‡∏ô F01, F02'
          }
        ]
      };
    }
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏∑‡πà‡∏ô: ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Category_Config sheet
    const sheets = getSheetsClient();
    
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEETS_ID,
      range: 'Category_Config!A:E', // A=‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô, B-E=field names
    });
    
    const rows = response.data.values || [];
    
    if (rows.length === 0) {
      throw new Error('Category_Config sheet is empty');
    }
    
    // ‡∏´‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÉ‡∏ä‡πâ subCategory ‡πÅ‡∏ó‡∏ô category)
    const targetRow = rows.find(row => row[0] && row[0].trim() === subCategory);
    
    if (!targetRow) {
      console.warn(`Sub category "${subCategory}" not found in Category_Config sheet`);
      // Fallback: ‡∏™‡∏£‡πâ‡∏≤‡∏á default fields
      return createDefaultFields(subCategory);
    }
    
    // ‡πÅ‡∏õ‡∏•‡∏á row ‡πÄ‡∏õ‡πá‡∏ô field configuration
    const fields = [];
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å column B (index 1) ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ
    for (let i = 1; i < targetRow.length && i <= 4; i++) { // ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 4 fields
      const fieldName = targetRow[i];
      
      if (fieldName && fieldName.trim()) {
        const cleanFieldName = fieldName.trim();
        
        fields.push({
          name: cleanFieldName,
          type: 'combobox',
          required: true,
          placeholder: createPlaceholder(cleanFieldName)
        });
      }
    }
    
    if (fields.length === 0) {
      console.warn(`No fields configured for sub category "${subCategory}"`);
      return createDefaultFields(subCategory);
    }
    
    console.log(`Found ${fields.length} dynamic fields for sub category: ${subCategory}`);
    console.log('Fields:', fields.map(f => f.name));
    
    return {
      useExisting: false,
      category: subCategory,      // üî• For backward compatibility
      subCategory: subCategory,   // üî• NEW: explicit subCategory
      fields: fields
    };
    
  } catch (error) {
    console.error('Error getting dynamic fields:', error);
    
    // Graceful fallback: ‡∏™‡∏£‡πâ‡∏≤‡∏á default fields
    console.log(`Fallback: creating default fields for sub category "${subCategory}"`);
    return createDefaultFields(subCategory);
  }
}

// üî• UPDATED: ‡∏™‡∏£‡πâ‡∏≤‡∏á default fields ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô sheet (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö subCategory)
function createDefaultFields(subCategory) {
  return {
    useExisting: false,
    category: subCategory,      // üî• For backward compatibility
    subCategory: subCategory,   // üî• NEW: explicit subCategory
    fields: [
      {
        name: '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£',
        type: 'combobox',
        required: true,
        placeholder: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô A, B, C'
      },
      {
        name: `${subCategory}‡πÄ‡∏ö‡∏≠‡∏£‡πå`,
        type: 'combobox', 
        required: true,
        placeholder: `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç${subCategory}`
      }
    ]
  };
}

// üî• NEW: ‡∏™‡∏£‡πâ‡∏≤‡∏á placeholder text ‡∏ï‡∏≤‡∏° field name
function createPlaceholder(fieldName) {
  const placeholders = {
    '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô A, B, C',
    '‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å ‡πÄ‡∏ä‡πà‡∏ô F01, F02',
    '‡πÄ‡∏™‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡πÄ‡∏™‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô C01, C02',
    'Gridline': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå Gridline ‡πÄ‡∏ä‡πà‡∏ô A1, B2',
    'WWTP.NO': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç WWTP',
    '‡∏ä‡∏±‡πâ‡∏ô': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏±‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 1F, 2F, B1',
    'Zone': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå Zone ‡πÄ‡∏ä‡πà‡∏ô A, B, C',
    '‡∏ú‡∏ô‡∏±‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡∏ú‡∏ô‡∏±‡∏á ‡πÄ‡∏ä‡πà‡∏ô W01, W02',
    '‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô R01, R02',
    '‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ô‡πÑ‡∏î ‡πÄ‡∏ä‡πà‡∏ô S01, S02'
  };
  
  return placeholders[fieldName] || `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå${fieldName}`;
}

// üî• UPDATED: ‡∏î‡∏∂‡∏á configuration ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô (backward compatibility - ‡πÉ‡∏ä‡πâ subCategory)
async function getCategoryConfig(subCategory) {
  return await getDynamicFields(subCategory);
}

// üî• UPDATED: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ config (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô sub categories)
async function getAllCategories() {
  try {
    console.log('Getting all configured sub categories');
    
    const sheets = getSheetsClient();
    
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEETS_ID,
      range: 'Category_Config!A:A', // ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà column A (‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô)
    });
    
    const rows = response.data.values || [];
    const subCategories = [];
    
    // skip header row (index 0)
    for (let i = 1; i < rows.length; i++) {
      const subCategory = rows[i][0];
      if (subCategory && subCategory.trim()) {
        subCategories.push(subCategory.trim());
      }
    }
    
    console.log(`Found ${subCategories.length} configured sub categories:`, subCategories);
    
    return subCategories;
    
  } catch (error) {
    console.error('Error getting all sub categories:', error);
    
    // ‡∏ñ‡πâ‡∏≤ sheet ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    if (error.message.includes('Unable to parse range') || 
        error.message.includes('not found')) {
      console.log('Category_Config sheet not found, creating...');
      await createCategoryConfigSheet();
      return ['‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å']; // return default
    }
    
    throw error;
  }
}

// üî• UPDATED: ‡∏™‡∏£‡πâ‡∏≤‡∏á Category_Config sheet (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å) - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
async function createCategoryConfigSheet() {
  try {
    const sheets = getSheetsClient();
    
    console.log('Creating Category_Config sheet...');
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° sheet ‡πÉ‡∏´‡∏°‡πà
    await sheets.spreadsheets.batchUpdate({
      spreadsheetId: SHEETS_ID,
      requestBody: {
        requests: [{
          addSheet: {
            properties: {
              title: 'Category_Config',
              gridProperties: {
                rowCount: 100,
                columnCount: 10
              }
            }
          }
        }]
      }
    });
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° header ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    const values = [
      // Header row
      ['‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô', 'field1_name', 'field2_name', 'field3_name', 'field4_name'],
      // Default data - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sub categories
      ['‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å', '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£', '‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå', '', ''],
      ['‡πÄ‡∏™‡∏≤', '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£', '‡πÄ‡∏™‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå', 'Gridline', ''],
      ['‡∏ö‡∏≠‡∏ö‡∏ö‡∏¥‡πâ‡∏á‡∏Ñ‡πå‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏µ‡∏¢', '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£', 'WWTP.NO', 'Gridline', ''],
      ['‡∏û‡∏∑‡πâ‡∏ô‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï‡∏≠‡∏¥‡∏î‡πÅ‡∏£‡∏á', '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£', '‡∏ä‡∏±‡πâ‡∏ô', 'Zone', 'Gridline'],
      // üî• NEW: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡πå
      ['‡∏ú‡∏ô‡∏±‡∏á', '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£', '‡∏ú‡∏ô‡∏±‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå', '‡∏ä‡∏±‡πâ‡∏ô', ''],
      ['‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤', '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£', '‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå', 'Zone', ''],
      ['‡∏ö‡∏±‡∏ô‡πÑ‡∏î', '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£', '‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå', '‡∏ä‡∏±‡πâ‡∏ô', '']
    ];
    
    await sheets.spreadsheets.values.update({
      spreadsheetId: SHEETS_ID,
      range: 'Category_Config!A1:E8',  // üî• ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î range
      valueInputOption: 'USER_ENTERED',
      requestBody: { values }
    });
    
    console.log('Category_Config sheet created successfully with enhanced sample data');
    
  } catch (error) {
    console.error('Error creating Category_Config sheet:', error);
    throw error;
  }
}

// üî• UPDATED: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡πÉ‡∏ä‡πâ dynamic fields ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÉ‡∏ä‡πâ subCategory)
function isDynamicCategory(subCategory) {
  return subCategory !== '‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å';
}

// üî• UPDATED: ‡πÅ‡∏õ‡∏•‡∏á dynamic fields ‡πÄ‡∏õ‡πá‡∏ô building/foundation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Master data (‡πÉ‡∏ä‡πâ subCategory)
function convertDynamicFieldsToMasterData(subCategory, dynamicFields) {
  if (!dynamicFields || typeof dynamicFields !== 'object') {
    return { building: '', foundation: '' };
  }
  
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å ‡πÉ‡∏ä‡πâ mapping ‡∏ï‡∏£‡∏á‡πÜ
  if (subCategory === '‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å') {
    return {
      building: dynamicFields['‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£'] || '',
      foundation: dynamicFields['‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå'] || ''
    };
  }
  
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ä‡πâ field ‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô building, field ‡∏ó‡∏µ‡πà 2 ‡πÄ‡∏õ‡πá‡∏ô foundation
  const fieldValues = Object.values(dynamicFields);
  return {
    building: fieldValues[0] || '', // field ‡πÅ‡∏£‡∏Å (‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏õ‡πá‡∏ô ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£)
    foundation: fieldValues[1] || '' // field ‡∏ó‡∏µ‡πà 2 (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏™‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå, WWTP.NO)
  };
}

// üî• UPDATED: ‡πÅ‡∏õ‡∏•‡∏á building/foundation ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô dynamic fields (‡πÉ‡∏ä‡πâ subCategory)
function convertMasterDataToDynamicFields(subCategory, building, foundation) {
  if (subCategory === '‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å') {
    return {
      '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£': building || '',
      '‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå': foundation || ''
    };
  }
  
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á field names ‡∏à‡∏≤‡∏Å config
  // ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ return ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å getDynamicFields ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ field names ‡∏à‡∏£‡∏¥‡∏á)
  return {
    '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£': building || '',
    [`${subCategory}‡πÄ‡∏ö‡∏≠‡∏£‡πå`]: foundation || ''
  };
}

// üî• UPDATED: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö combination (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö logging/display) - ‡πÉ‡∏ä‡πâ subCategory
function createCombinationDescription(subCategory, dynamicFields) {
  if (!dynamicFields || typeof dynamicFields !== 'object') {
    return subCategory;
  }
  
  const values = Object.entries(dynamicFields)
    .filter(([key, value]) => value && value.trim())
    .map(([key, value]) => `${key}:${value}`)
    .join(', ');
    
  return values || subCategory;
}

// üî• UPDATED: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ field values ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÉ‡∏ä‡πâ subCategory)
function validateDynamicFields(subCategory, dynamicFields) {
  if (!dynamicFields || typeof dynamicFields !== 'object') {
    return { valid: false, error: 'Dynamic fields is required' };
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ field ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏° config ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const requiredFieldCount = subCategory === '‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å' ? 2 : Object.keys(dynamicFields).length;
  const actualFieldCount = Object.values(dynamicFields).filter(value => value && value.trim()).length;
  
  if (actualFieldCount === 0) {
    return { valid: false, error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' };
  }
  
  // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ field ‡πÅ‡∏£‡∏Å (‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£) ‡πÅ‡∏•‡∏∞ field ‡∏ó‡∏µ‡πà 2
  const fieldValues = Object.values(dynamicFields);
  if (!fieldValues[0] || !fieldValues[0].trim()) {
    return { valid: false, error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£' };
  }
  
  if (!fieldValues[1] || !fieldValues[1].trim()) {
    const fieldNames = Object.keys(dynamicFields);
    const secondFieldName = fieldNames[1] || '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà 2';
    return { valid: false, error: `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å${secondFieldName}` };
  }
  
  return { valid: true };
}

// üî• NEW: Main Category Management Functions

// Import ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å sheets.js
const { getMainCategories: getSheetsMainCategories, getSubCategories: getSheetsSubCategories, getTopicsForCategory: getSheetsTopicsForCategory } = require('./sheets');

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏≤‡∏Å QC Topics
async function getMainCategories() {
  try {
    return await getSheetsMainCategories();
  } catch (error) {
    console.error('Error getting main categories:', error);
    return ['‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á']; // fallback
  }
}

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏Å
async function getSubCategoriesByMainCategory(mainCategory) {
  try {
    return await getSheetsSubCategories(mainCategory);
  } catch (error) {
    console.error(`Error getting sub categories for "${mainCategory}":`, error);
    return [];
  }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ main category ‡∏°‡∏µ sub categories ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
async function hasSubCategories(mainCategory) {
  const subCategories = await getSubCategoriesByMainCategory(mainCategory);
  return subCategories.length > 0;
}

// ‡∏î‡∏∂‡∏á topics ‡∏ï‡∏≤‡∏° main category ‡πÅ‡∏•‡∏∞ sub category
async function getTopicsByCategories(mainCategory, subCategory) {
  try {
    return await getSheetsTopicsForCategory(mainCategory, subCategory);
  } catch (error) {
    console.error(`Error getting topics for "${mainCategory}/${subCategory}":`, error);
    return [];
  }
}

module.exports = {
  // üî• UPDATED APIs (‡πÉ‡∏ä‡πâ subCategory ‡πÅ‡∏ó‡∏ô category)
  getDynamicFields,
  validateDynamicFields,
  convertDynamicFieldsToMasterData,
  convertMasterDataToDynamicFields,
  createCombinationDescription,
  
  // üî• NEW: Main Category APIs
  getMainCategories,
  getSubCategoriesByMainCategory,
  hasSubCategories,
  getTopicsByCategories,
  
  // Existing APIs (for backward compatibility)
  getCategoryConfig,
  getAllCategories,
  createCategoryConfigSheet,
  isDynamicCategory,
  
  // Legacy APIs (deprecated but kept for compatibility)
  convertDynamicFieldsToLegacy: convertDynamicFieldsToMasterData,
  convertLegacyToDynamicFields: convertMasterDataToDynamicFields
};
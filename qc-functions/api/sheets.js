const { getSheetsClient: createSheetsClient } = require('../services/google-auth');

const SHEETS_ID = '1ez_Dox16jf9lr5TEsLL5BEOfKZDNGkVD31YSBtx3Qa8';

// Export getSheetsClient function
function getSheetsClient() {
  return createSheetsClient();
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Unique ID
function generateUniqueId() {
  const timestamp = Date.now();
  const random = Math.random().toString(36).substr(2, 9);
  return `${timestamp}-${random}`;
}

// üî• UPDATED: ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à QC ‡πÅ‡∏ö‡∏ö 3 columns (MainCategory -> SubCategory -> Topics)
async function getQCTopics() {
  try {
    const sheets = getSheetsClient();
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEETS_ID,
      range: '‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à QC!A:C', // üî• 3 columns: A=‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏Å, B=‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô, C=‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
    });
    
    const rows = response.data.values || [];
    const topics = {};
    
    console.log(`üìä Processing ${rows.length} rows from QC Topics sheet...`);
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° mainCategory -> subCategory -> topics
    rows.slice(1).forEach((row, index) => { // skip header
      if (row.length >= 3 && row[0] && row[1] && row[2]) {
        const mainCategory = row[0].trim();     // Column A: ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏Å (‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡πå)
        const subCategory = row[1].trim();      // Column B: ‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô (‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å/‡πÄ‡∏™‡∏≤/‡∏ú‡∏ô‡∏±‡∏á ‡∏Ø‡∏•‡∏Ø)
        const topic = row[2].trim();            // Column C: ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á nested structure
        if (!topics[mainCategory]) {
          topics[mainCategory] = {};
          console.log(`üìÅ Created main category: ${mainCategory}`);
        }
        
        if (!topics[mainCategory][subCategory]) {
          topics[mainCategory][subCategory] = [];
          console.log(`üìÇ Created sub category: ${mainCategory} > ${subCategory}`);
        }
        
        topics[mainCategory][subCategory].push(topic);
        console.log(`üìÑ Added topic ${index}: ${mainCategory} > ${subCategory} > ${topic}`);
      } else {
        console.log(`‚ö†Ô∏è Skipped incomplete row ${index + 2}:`, row);
      }
    });
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
    console.log('üî• QC Topics structure summary:');
    Object.entries(topics).forEach(([mainCat, subCats]) => {
      console.log(`  üìÅ ${mainCat}:`);
      Object.entries(subCats).forEach(([subCat, topicList]) => {
        console.log(`    üìÇ ${subCat}: ${topicList.length} topics`);
      });
    });
    
    return topics;
  } catch (error) {
    console.error('‚ùå Error reading QC topics:', error);
    throw error;
  }
}

// üî• NEW: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function getMainCategories() {
  try {
    const topics = await getQCTopics();
    const mainCategories = Object.keys(topics);
    
    console.log(`üìä Found ${mainCategories.length} main categories:`, mainCategories);
    return mainCategories;
  } catch (error) {
    console.error('Error getting main categories:', error);
    return ['‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á']; // fallback
  }
}

// üî• NEW: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏Å
async function getSubCategories(mainCategory) {
  try {
    const topics = await getQCTopics();
    
    if (!topics[mainCategory]) {
      console.log(`‚ö†Ô∏è Main category "${mainCategory}" not found`);
      return [];
    }
    
    const subCategories = Object.keys(topics[mainCategory]);
    
    console.log(`üìä Found ${subCategories.length} sub categories for "${mainCategory}":`, subCategories);
    return subCategories;
  } catch (error) {
    console.error(`Error getting sub categories for "${mainCategory}":`, error);
    return [];
  }
}

// üî• NEW: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô
async function getTopicsForCategory(mainCategory, subCategory) {
  try {
    const topics = await getQCTopics();
    
    if (!topics[mainCategory] || !topics[mainCategory][subCategory]) {
      console.log(`‚ö†Ô∏è Category "${mainCategory}/${subCategory}" not found`);
      return [];
    }
    
    const categoryTopics = topics[mainCategory][subCategory];
    
    console.log(`üìä Found ${categoryTopics.length} topics for "${mainCategory}/${subCategory}"`);
    return categoryTopics;
  } catch (error) {
    console.error(`Error getting topics for "${mainCategory}/${subCategory}":`, error);
    return [];
  }
}

async function getMasterData() {
  try {
    const sheets = getSheetsClient();
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Master_Buildings_Foundations sheet
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEETS_ID,
      range: 'Master_Buildings_Foundations!A:B', // A=‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£, B=‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å
    });
    
    const rows = response.data.values || [];
    const masterData = {
      buildings: new Set(),
      foundations: new Set(),
      combinations: [] // ‡πÄ‡∏Å‡πá‡∏ö combination ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    };
    
    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (skip header row)
    rows.slice(1).forEach(row => {
      if (row[0] && row[1]) {
        const building = row[0].trim();
        const foundation = row[1].trim();
        
        masterData.buildings.add(building);
        masterData.foundations.add(foundation);
        masterData.combinations.push({ building, foundation });
      }
    });
    
    return {
      buildings: Array.from(masterData.buildings).sort(),
      foundations: Array.from(masterData.foundations).sort(),
      combinations: masterData.combinations
    };
    
  } catch (error) {
    console.error('Error reading master data:', error);
    
    // ‡∏ñ‡πâ‡∏≤ sheet ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    if (error.message.includes('Unable to parse range')) {
      console.log('Master_Buildings_Foundations sheet not found, creating...');
      await createMasterDataSheet();
      return { buildings: [], foundations: [], combinations: [] };
    }
    
    throw error;
  }
}

// üî• ‡∏™‡∏£‡πâ‡∏≤‡∏á Master Data Sheet (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)
async function createMasterDataSheet() {
  try {
    const sheets = getSheetsClient();
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° sheet ‡πÉ‡∏´‡∏°‡πà
    await sheets.spreadsheets.batchUpdate({
      spreadsheetId: SHEETS_ID,
      requestBody: {
        requests: [{
          addSheet: {
            properties: {
              title: 'Master_Buildings_Foundations',
              gridProperties: {
                rowCount: 1000,
                columnCount: 10
              }
            }
          }
        }]
      }
    });
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° header
    await sheets.spreadsheets.values.update({
      spreadsheetId: SHEETS_ID,
      range: 'Master_Buildings_Foundations!A1:C1',
      valueInputOption: 'USER_ENTERED',
      requestBody: {
        values: [['‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£', '‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á']]
      }
    });
    
    console.log('Master_Buildings_Foundations sheet created successfully');
    
  } catch (error) {
    console.error('Error creating master data sheet:', error);
    throw error;
  }
}

// üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ + ‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà
async function addMasterData(building, foundation) {
  try {
    const sheets = getSheetsClient();
    const timestamp = new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ combination ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingData = await getMasterData();
    const exists = existingData.combinations.some(
      combo => combo.building === building && combo.foundation === foundation
    );
    
    if (exists) {
      console.log(`Combination ${building}-${foundation} already exists`);
      return { success: true, message: 'Data already exists', duplicate: true };
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    const values = [[building, foundation, timestamp]];
    
    await sheets.spreadsheets.values.append({
      spreadsheetId: SHEETS_ID,
      range: 'Master_Buildings_Foundations!A:C',
      valueInputOption: 'USER_ENTERED',
      requestBody: { values }
    });
    
    console.log(`Added new master data: ${building}-${foundation}`);
    
    return { 
      success: true, 
      message: 'Data added successfully',
      duplicate: false,
      timestamp 
    };
    
  } catch (error) {
    console.error('Error adding master data:', error);
    throw error;
  }
}

// üî• UPDATED: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö mainCategory + subCategory)
async function getCompletedTopics(criteria) {
  try {
    const sheets = getSheetsClient();
    const { building, foundation, mainCategory, subCategory } = criteria;
    
    console.log(`üîç Getting completed topics for: ${mainCategory} > ${subCategory} (${building}-${foundation})`);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Master_Photos_Log
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEETS_ID,
      range: 'Master_Photos_Log!A:K' // Column K ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mainCategory
    });
    
    const rows = response.data.values || [];
    const completedTopics = new Set();
    
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç (skip header row)
    rows.slice(1).forEach(row => {
      if (row.length >= 6) {
        const [id, timestamp, rowBuilding, rowFoundation, rowSubCategory, topic, filename, driveUrl, location, dynamicFieldsJSON, rowMainCategory] = row;
        
        // üî• ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏±‡πâ‡∏á mainCategory ‡πÅ‡∏•‡∏∞ subCategory
        const categoryMatch = rowMainCategory 
          ? (rowMainCategory === mainCategory && rowSubCategory === subCategory) // ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
          : (rowSubCategory === subCategory); // backward compatibility ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        
        if (rowBuilding === building && 
            rowFoundation === foundation && 
            categoryMatch &&
            topic) {
          completedTopics.add(topic.trim());
        }
      }
    });
    
    return {
      success: true,
      data: {
        completedTopics: Array.from(completedTopics),
        criteria
      }
    };
    
  } catch (error) {
    console.error('Error getting completed topics:', error);
    return {
      success: false,
      data: { completedTopics: [] }
    };
  }
}

// üî• UPDATED: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ö‡∏ö Full Match (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö mainCategory + subCategory)
async function getCompletedTopicsFullMatch(criteria) {
  try {
    const sheets = getSheetsClient();
    const { building, foundation, mainCategory, subCategory, dynamicFields } = criteria;
    
    console.log('üîç Full Match search criteria (3-level):', {
      mainCategory,
      subCategory,
      dynamicFields
    });
    
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEETS_ID,
      range: 'Master_Photos_Log!A:K'
    });
    
    const rows = response.data.values || [];
    const completedTopics = new Set();
    
    rows.slice(1).forEach(row => {
      if (row.length >= 6) {
        const [id, timestamp, rowBuilding, rowFoundation, rowSubCategory, topic, filename, driveUrl, location, dynamicFieldsJSON, rowMainCategory] = row;
        
        // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ category ‡∏Å‡πà‡∏≠‡∏ô (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πà‡∏≤)
        const categoryMatch = rowMainCategory 
          ? (rowMainCategory === mainCategory && rowSubCategory === subCategory)
          : (rowSubCategory === subCategory);
        
        if (!categoryMatch) return;
        
        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ dynamic fields ‡πÉ‡∏ô row (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤) ‡πÉ‡∏´‡πâ skip
        if (!dynamicFieldsJSON) return;
        
        try {
          const rowDynamicFields = JSON.parse(dynamicFieldsJSON);
          
          // ‚úÖ Full Match: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å field ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
          let isMatch = true;
          for (const [fieldName, fieldValue] of Object.entries(dynamicFields)) {
            if (fieldValue && fieldValue.trim()) {
              const rowFieldValue = rowDynamicFields[fieldName];
              if (!rowFieldValue || rowFieldValue.trim() !== fieldValue.trim()) {
                isMatch = false;
                break;
              }
            }
          }
          
          if (isMatch) {
            completedTopics.add(topic.trim());
            console.log(`‚úÖ Full Match found: ${topic} with fields:`, rowDynamicFields);
          }
          
        } catch (parseError) {
          console.log('‚ö†Ô∏è Cannot parse dynamic fields, skipping row');
        }
      }
    });
    
    console.log(`üìä Full Match result: ${completedTopics.size} completed topics`);
    
    return {
      success: true,
      data: {
        completedTopics: Array.from(completedTopics),
        criteria
      }
    };
    
  } catch (error) {
    console.error('Error in getCompletedTopicsFullMatch:', error);
    return {
      success: false,
      data: { completedTopics: [] }
    };
  }
}

// üî• UPDATED: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏° Dynamic Fields JSON ‡πÅ‡∏•‡∏∞ MainCategory
async function logPhoto(photoData) {
  try {
    const sheets = getSheetsClient();
    
    console.log(`üìù Logging photo: ${photoData.mainCategory} > ${photoData.subCategory} > ${photoData.topic}`);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Unique ID
    const uniqueId = generateUniqueId();
    const timestamp = new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' });
    
    // üî• ‡πÅ‡∏õ‡∏•‡∏á dynamic fields ‡πÄ‡∏õ‡πá‡∏ô JSON string
    const dynamicFieldsJSON = photoData.dynamicFields ? JSON.stringify(photoData.dynamicFields) : '';

    const values = [[
      uniqueId,                           // A: ID
      timestamp,                          // B: ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
      photoData.building,                 // C: ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
      photoData.foundation,               // D: ‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å/‡πÄ‡∏™‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå/‡∏ä‡∏±‡πâ‡∏ô
      photoData.subCategory,              // E: ‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô (‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å/‡πÄ‡∏™‡∏≤/‡∏ú‡∏ô‡∏±‡∏á)
      photoData.topic,                    // F: ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à
      photoData.filename,                 // G: ‡πÑ‡∏ü‡∏•‡πå
      photoData.driveUrl || '',           // H: URL
      photoData.location || '',           // I: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
      dynamicFieldsJSON,                  // J: Dynamic Fields JSON
      photoData.mainCategory || ''        // K: ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏Å (‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡πå)
    ]];

    await sheets.spreadsheets.values.append({
      spreadsheetId: SHEETS_ID,
      range: 'Master_Photos_Log!A:K',
      valueInputOption: 'RAW',
      requestBody: { values }
    });

    // üî• ‡πÄ‡∏û‡∏¥‡πà‡∏° field values ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö datalist
    if (photoData.dynamicFields) {
      await addFieldValuesFromPhoto(photoData.dynamicFields, photoData.subCategory);
    }
    
    return { success: true, timestamp, uniqueId };
    
  } catch (error) {
    console.error('Error logging photo:', error);
    throw error;
  }
}

// üî• ‡πÄ‡∏û‡∏¥‡πà‡∏° field values ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ
async function addFieldValuesFromPhoto(dynamicFields, subCategory) {
  if (!dynamicFields || typeof dynamicFields !== 'object') return;
  
  try {
    for (const [fieldName, fieldValue] of Object.entries(dynamicFields)) {
      if (fieldValue && fieldValue.trim()) {
        await addFieldValue(fieldName, fieldValue.trim(), subCategory);
      }
    }
  } catch (error) {
    console.error('Error adding field values from photo:', error);
    // ‡πÑ‡∏°‡πà throw ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
  }
}

// üî• ‡∏™‡∏£‡πâ‡∏≤‡∏á Master_Field_Values Sheet
async function createFieldValuesSheet() {
  try {
    const sheets = getSheetsClient();
    
    console.log('Creating Master_Field_Values sheet for datalist...');
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° sheet ‡πÉ‡∏´‡∏°‡πà
    await sheets.spreadsheets.batchUpdate({
      spreadsheetId: SHEETS_ID,
      requestBody: {
        requests: [{
          addSheet: {
            properties: {
              title: 'Master_Field_Values',
              gridProperties: {
                rowCount: 1000,
                columnCount: 6
              }
            }
          }
        }]
      }
    });
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° header
    const values = [
      ['field_name', 'field_value', 'sub_category', 'count', 'last_used', 'created_date']
    ];
    
    await sheets.spreadsheets.values.update({
      spreadsheetId: SHEETS_ID,
      range: 'Master_Field_Values!A1:F1',
      valueInputOption: 'USER_ENTERED',
      requestBody: { values }
    });
    
    console.log('Master_Field_Values sheet created successfully');
    
  } catch (error) {
    console.error('Error creating field values sheet:', error);
    throw error;
  }
}

// üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï field value ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö datalist
async function addFieldValue(fieldName, fieldValue, subCategory) {
  if (!fieldValue || !fieldValue.trim()) return;
  
  const sheets = getSheetsClient();
  const trimmedValue = fieldValue.trim();
  const timestamp = new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' });
  
  try {
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEETS_ID,
      range: 'Master_Field_Values!A:F',
    });
    
    const rows = response.data.values || [];
    let existingRowIndex = -1;
    let existingCount = 0;
    
    // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≥ (field_name + field_value + sub_category)
    for (let i = 1; i < rows.length; i++) {
      const [rowFieldName, rowFieldValue, rowSubCategory] = rows[i];
      if (rowFieldName === fieldName && rowFieldValue === trimmedValue && rowSubCategory === subCategory) {
        existingRowIndex = i + 1;
        existingCount = parseInt(rows[i][3] || 1);
        break;
      }
    }
    
    if (existingRowIndex > 0) {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (‡πÄ‡∏û‡∏¥‡πà‡∏° count)
      await sheets.spreadsheets.values.update({
        spreadsheetId: SHEETS_ID,
        range: `Master_Field_Values!A${existingRowIndex}:F${existingRowIndex}`,
        valueInputOption: 'RAW',
        requestBody: {
          values: [[fieldName, trimmedValue, subCategory, existingCount + 1, timestamp, rows[existingRowIndex - 1][5]]]
        }
      });
    } else {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
      const values = [[fieldName, trimmedValue, subCategory, 1, timestamp, timestamp]];
      await sheets.spreadsheets.values.append({
        spreadsheetId: SHEETS_ID,
        range: 'Master_Field_Values!A:F',
        valueInputOption: 'RAW',
        requestBody: { values }
      });
    }
  } catch (sheetError) {
    if (sheetError.message.includes('Unable to parse range')) {
      await createFieldValuesSheet();
      await addFieldValue(fieldName, fieldValue, subCategory); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
    }
  }
}

// üî• ‡∏î‡∏∂‡∏á field values ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö datalist
async function getFieldValues(fieldName, subCategory) {
  try {
    const sheets = getSheetsClient();
    
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEETS_ID,
      range: 'Master_Field_Values!A:F',
    });
    
    const rows = response.data.values || [];
    const values = [];
    
    console.log(`üîç Getting field values for: fieldName="${fieldName}", subCategory="${subCategory}"`);
    
    // ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    rows.slice(1).forEach(row => {
      if (row.length >= 3) {
        const [rowFieldName, rowFieldValue, rowSubCategory, count, lastUsed] = row;
        
        console.log(`üìã Checking row: field="${rowFieldName}", value="${rowFieldValue}", subCategory="${rowSubCategory}"`);
        
        let shouldInclude = false;
        
        if (rowFieldName === fieldName) {
          if (fieldName === '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£') {
            // ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å subCategory (‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á subCategory)
            shouldInclude = true;
            console.log(`‚úÖ Including "${rowFieldValue}" - ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô`);
          } else {
            // Field ‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á subCategory ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            if (rowSubCategory === subCategory) {
              shouldInclude = true;
              console.log(`‚úÖ Including "${rowFieldValue}" - subCategory match: ${subCategory}`);
            } else {
              console.log(`‚ùå Excluding "${rowFieldValue}" - subCategory mismatch: ${rowSubCategory} vs ${subCategory}`);
            }
          }
        }
        
        if (shouldInclude && rowFieldValue && rowFieldValue.trim()) {
          values.push({
            value: rowFieldValue.trim(),
            count: parseInt(count || 1),
            lastUsed: lastUsed,
            subCategory: rowSubCategory
          });
        }
      }
    });
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° count (‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢) ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏° lastUsed (‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤)
    values.sort((a, b) => {
      if (b.count !== a.count) return b.count - a.count;
      return new Date(b.lastUsed) - new Date(a.lastUsed);
    });

    // Deduplicate ‡πÅ‡∏ï‡πà‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° count/usage
    const seen = new Set();
    const uniqueValues = values.filter(v => {
      if (seen.has(v.value)) return false;
      seen.add(v.value);
      return true;
    });

    const result = uniqueValues.map(v => v.value);
    
    console.log(`üìä Final result for ${fieldName} in ${subCategory}:`, result);
    console.log(`üìà Total values: ${result.length}`);
    
    return result;
    
  } catch (error) {
    console.error('‚ùå Error getting field values:', error);
    return [];
  }
}

// üî• UPDATED: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏° Unique ID ‡πÅ‡∏•‡∏∞ MainCategory
async function logReport(reportData) {
  try {
    const sheets = getSheetsClient();
    
    console.log(`üìä Logging report: ${reportData.mainCategory} > ${reportData.subCategory}`);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Unique ID
    const uniqueId = generateUniqueId();
    const timestamp = new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' });
    
    const values = [[
      uniqueId,                      // A: ID
      timestamp,                     // B: ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
      reportData.building,           // C: ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
      reportData.foundation,         // D: ‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Å
      reportData.subCategory,        // E: ‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô
      reportData.filename,           // F: ‡πÑ‡∏ü‡∏•‡πå
      reportData.driveUrl || '',     // G: URL
      reportData.photoCount || 0,    // H: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ
      reportData.mainCategory || ''  // I: ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏Å üî• NEW
    ]];
    
    await sheets.spreadsheets.values.append({
      spreadsheetId: SHEETS_ID,
      range: 'Final_Reports_Log!A:I',
      valueInputOption: 'USER_ENTERED',
      requestBody: { values }
    });
    
    return { 
      success: true, 
      timestamp,
      uniqueId 
    };
    
  } catch (error) {
    console.error('Error logging report:', error);
    throw error;
  }
}

module.exports = {
  getSheetsClient,
  generateUniqueId,
  
  // üî• UPDATED: Enhanced QC Topics Functions
  getQCTopics,
  getMainCategories,
  getSubCategories,
  getTopicsForCategory,
  
  // Master Data Functions
  getMasterData,
  addMasterData,
  createMasterDataSheet,
  
  // Photo Logging Functions
  logPhoto,
  addFieldValuesFromPhoto,
  
  // Progress Tracking Functions
  getCompletedTopics,
  getCompletedTopicsFullMatch,
  
  // Field Values Functions  
  createFieldValuesSheet,
  addFieldValue,
  getFieldValues,
  
  // Report Functions
  logReport
};
// pdf-generator.ts - Firebase Version 11 (Grid Layout for Both)

import * as puppeteer from 'puppeteer';
import * as admin from 'firebase-admin';
import { PhotoData as FirestorePhotoData } from '../api/firestore';
import { Timestamp } from 'firebase-admin/firestore';
import axios from 'axios';

// ========================================
// TYPE DEFINITIONS (V11 - Based on V10)
// ========================================

// (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô V10 ‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£)
export interface ReportSettings {
  layoutType: 'default' | string;
  qcPhotosPerPage: 1 | 2 | 4 | 6;
  dailyPhotosPerPage: 1 | 2 | 4 | 6;
  photosPerPage: 1 | 2 | 4 | 6; // This is the "runtime" setting
  projectLogoUrl: string;
}

export const DEFAULT_SETTINGS: ReportSettings = {
  layoutType: 'default',
  qcPhotosPerPage: 6,
  dailyPhotosPerPage: 6, // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 2 ‡πÄ‡∏õ‡πá‡∏ô 6
  photosPerPage: 6,
  projectLogoUrl: '',
};

export interface PhotoData {
  topic: string;
  topicOrder?: number;
  imageBase64?: string | null;
  isPlaceholder?: boolean;
  originalTopic?: string;
  storageUrl?: string;
  imageUrl?: string;
  location?: string;
  timestamp?: string;
}

export interface FullLayoutPhoto extends PhotoData {
  topicOrder: number;
}

export interface ReportData {
  projectId: string;
  projectName: string;
  mainCategory: string;
  subCategory: string;
  dynamicFields: Record<string, string>;
}

interface PDFReportData {
  photos: PhotoData[];
  projectName: string;
  category: string;
  dynamicFields?: Record<string, string>;
}

export interface ReportDataDaily {
  projectId: string;
  projectName: string;
  date: string; // YYYY-MM-DD
}

export interface DailyPhotoWithBase64 {
  description: string;
  base64: string | null;
  location: string;
  timestamp: string;
}

// ========================================
// HELPER FUNCTIONS (V11 - Unchanged)
// ========================================

async function fetchLogoAsBase64(url: string): Promise<string | null> {
  if (!url) return null;
  try {
    const response = await axios.get(url, { responseType: 'arraybuffer' });
    const mimeType = response.headers['content-type'] || 'image/png';
    const base64 = Buffer.from(response.data).toString('base64');
    return `data:${mimeType};base64,${base64}`;
  } catch (error: any) {
    console.error(`‚ùå Failed to fetch logo from ${url}:`, error.message);
    return null;
  }
}

async function loadImagesFromStorage(photos: PhotoData[]): Promise<PhotoData[]> {
  const bucket = admin.storage().bucket();
  if (!photos || photos.length === 0) return photos;
  console.log(`üì• Loading ${photos.length} images (Parallel Mode)...`);

  // ‚úÖ [‡πÉ‡∏´‡∏°‡πà] ‡πÉ‡∏ä‡πâ Promise.all ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
  const downloadPromises = photos.map(async (photo) => {
    if (photo.isPlaceholder) {
      return { ...photo, imageBase64: null };
    }
    const storagePath = photo.storageUrl;
    if (!storagePath) {
      return { ...photo, imageBase64: null };
    }

    try {
      const file = bucket.file(storagePath);

      // ‚úÖ [‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç] 1. Pre-check Metadata
      // ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å .getMetadata() ‡∏à‡∏∞‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ GCS ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      // ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ Cache ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà (‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤ 2-5 ‡∏ô‡∏≤‡∏ó‡∏µ)
      const [metadata] = await file.getMetadata();
      const mimeType = metadata.contentType || 'image/jpeg';

      // ‚úÖ 2. Download (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß)
      const [buffer] = await file.download();
      
      const base64 = buffer.toString('base64');
      return { ...photo, imageBase64: `data:${mimeType};base64,${base64}` };

    } catch (error) {
      console.error(`‚ùå Failed to load image (Cache/Propagation Issue?) for "${photo.topic}" from ${storagePath}:`, (error as Error).message);
      // ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á) ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
      return { ...photo, imageBase64: null };
    }
  });

  // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î (‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß) ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
  const photosWithImages = await Promise.all(downloadPromises);
  
  return photosWithImages;
}

function getCurrentThaiDate(): string {
  const now = new Date();
  const day = now.getDate().toString().padStart(2, '0');
  const month = (now.getMonth() + 1).toString().padStart(2, '0');
  const year = now.getFullYear() + 543;
  return `${day}/${month}/${year}`;
}

// ========================================
// HTML GENERATION FUNCTIONS (V11 - QC GRID)
// (This section is identical to V9.1)
// ========================================

function create2FieldHeader(
  fields: Record<string, string>, category: string, projectName: string, 
  currentDate: string, pageNumber: number, totalPages: number,
  settings: ReportSettings, logoBase64: string | null
): string {
  const fieldEntries = Object.entries(fields).filter(([key, value]) => value && value.trim());
  return `
    <header class="header">
      <div class="logo-section">
        ${logoBase64 ? `<img src="${logoBase64}" class="header-logo" alt="Logo">` : `
          <div class="logo-central-pattana"><span class="logo-central">CENTRAL</span><span class="logo-pattana">PATTANA</span></div>`}
      </div>
      <div class="header-box">
        <div class="title-section"><h1>‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</h1></div>
        <div class="info-section">
          <div class="info-column info-left">
            <div class="info-item"><span class="label">‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£:</span><span class="value">${projectName}</span></div>
            ${fieldEntries[0] ? `<div class="info-item"><span class="label">${fieldEntries[0][0]}:</span><span class="value">${fieldEntries[0][1]}</span></div>` : ''}
            <div class="info-item"><span class="label">‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô:</span><span class="value">${category}</span></div>
          </div>
          <div class="info-column info-right">
            <div class="info-item"><span class="label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</span><span class="value">${currentDate}</span></div>
            ${fieldEntries[1] ? `<div class="info-item"><span class="label">${fieldEntries[1][0]}:</span><span class="value">${fieldEntries[1][1]}</span></div>` : ''}
            <div class="info-item"><span class="label">‡πÅ‡∏ú‡πà‡∏ô‡∏ó‡∏µ‡πà:</span><span class="value">${pageNumber}/${totalPages}</span></div>
          </div>
        </div>
      </div>
    </header>`;
}

function create3FieldHeader(
  fields: Record<string, string>, category: string, projectName: string, 
  currentDate: string, pageNumber: number, totalPages: number,
  settings: ReportSettings, logoBase64: string | null
): string {
  const fieldEntries = Object.entries(fields).filter(([key, value]) => value && value.trim());
  return `
    <header class="header">
      <div class="logo-section">
        ${logoBase64 ? `<img src="${logoBase64}" class="header-logo" alt="Logo">` : `
          <div class="logo-central-pattana"><span class="logo-central">CENTRAL</span><span class="logo-pattana">PATTANA</span></div>`}
      </div>
      <div class="header-box">
        <div class="title-section"><h1>‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</h1></div>
        <div class="info-section">
          <div class="info-grid-3">
            <div class="info-item"><span class="label">‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£:</span><span class="value">${projectName}</span></div>
            <div class="info-item"><span class="label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</span><span class="value">${currentDate}</span></div>
            <div class="info-item"><span class="label">‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô:</span><span class="value">${category}</span></div>
            ${fieldEntries.map(([key, value]: [string, string]): string => `
              <div class="info-item"><span class="label">${key}:</span><span class="value">${value}</span></div>`).join('')}
            <div class="info-item"><span class="label">‡πÅ‡∏ú‡πà‡∏ô‡∏ó‡∏µ‡πà:</span><span class="value">${pageNumber}/${totalPages}</span></div>
          </div>
        </div>
      </div>
    </header>`;
}

function create4FieldHeader(
  fields: Record<string, string>, category: string, projectName: string, 
  currentDate: string, pageNumber: number, totalPages: number,
  settings: ReportSettings, logoBase64: string | null
): string {
  const fieldEntries = Object.entries(fields).filter(([key, value]) => value && value.trim());
  return `
    <header class="header">
      <div class="logo-section">
        ${logoBase64 ? `<img src="${logoBase64}" class="header-logo" alt="Logo">` : `
          <div classs="logo-central-pattana"><span class="logo-central">CENTRAL</span><span class="logo-pattana">PATTANA</span></div>`}
      </div>
      <div class="header-box">
        <div class="title-section"><h1>‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</h1></div>
        <div class="info-section">
          <div class="info-grid-4">
            <div class="info-item"><span class="label">‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£:</span><span class="value">${projectName}</span></div>
            <div class="info-item"><span class="label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</span><span class="value">${currentDate}</span></div>
            ${fieldEntries.map(([key, value]: [string, string]): string => `
              <div class="info-item"><span class="label">${key}:</span><span class="value">${value}</span></div>`).join('')}
            <div class="info-item"><span class="label">‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô:</span><span class="value">${category}</span></div>
            <div class="info-item"><span class="label">‡πÅ‡∏ú‡πà‡∏ô‡∏ó‡∏µ‡πà:</span><span class="value">${pageNumber}/${totalPages}</span></div>
          </div>
        </div>
      </div>
    </header>`;
}

function createDynamicHeader(
  reportData: PDFReportData, pageNumber: number, totalPages: number,
  settings: ReportSettings, logoBase64: string | null
): string {
  const { category, dynamicFields, projectName } = reportData;
  const currentDate = getCurrentThaiDate();
  const fieldsToDisplay = dynamicFields || {};
  const fieldCount = Object.keys(fieldsToDisplay).length;
  
  if (fieldCount <= 2) {
    return create2FieldHeader(fieldsToDisplay, category, projectName, currentDate, pageNumber, totalPages, settings, logoBase64);
  } else if (fieldCount === 3) {
    return create3FieldHeader(fieldsToDisplay, category, projectName, currentDate, pageNumber, totalPages, settings, logoBase64);
  } else {
    return create4FieldHeader(fieldsToDisplay, category, projectName, currentDate, pageNumber, totalPages, settings, logoBase64);
  }
}

function createPhotosGrid(
  photos: PhotoData[], pageIndex: number, photosPerPage: 1 | 2 | 4 | 6
): string {
  const rows: PhotoData[][] = [];
  const itemsPerBatch = photosPerPage === 1 ? 1 : 2;
  
  for (let i = 0; i < photos.length; i += itemsPerBatch) {
    rows.push(photos.slice(i, i + itemsPerBatch));
  }

  const rowsHTML = rows.map((rowPhotos: PhotoData[], rowIndex: number): string => {
    const photosHTML = rowPhotos.map((photo: PhotoData, photoIndex: number): string => {
      const photoNumberInPage = (rowIndex * itemsPerBatch) + photoIndex + 1;
      const displayNumber = photo.topicOrder || 
        ((pageIndex * photosPerPage) + photoNumberInPage);
      
      // ‚úÖ [V11] ‡πÉ‡∏ä‡πâ topic (‡∏ã‡∏∂‡πà‡∏á Daily ‡∏Ñ‡∏∑‡∏≠ description)
      const topicName = photo.topic || `‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${displayNumber}`;
      
      return `
        <div class="photo-frame">
          <div class="photo-container">
            ${photo.imageBase64 ? 
              `<img src="${photo.imageBase64}" alt="${topicName}" class="photo-image">` :
              `<div class="photo-placeholder"></div>`
            }
          </div>
          <div class="photo-caption">
            <span class="photo-number">${displayNumber}.</span>
            <span class="photo-title">${topicName}</span>
          </div>
        </div>
      `;
    }).join('');
    
    // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏•‡∏ö inline height ‡∏≠‡∏≠‡∏Å ‡πÉ‡∏´‡πâ CSS ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    return `<div class="photo-row">${photosHTML}</div>`;
  }).join('');

  return `<main class="photos-grid">${rowsHTML}</main>`;
}

function getInlineCSS(): string {
  // (CSS ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á V9.1/V10 ‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà)
  // (‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ CSS ‡∏Ç‡∏≠‡∏á Grid Layout ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß)
  return `
    <style>
      @page { size: A4; margin: 10mm; }
      * { margin: 0; padding: 0; box-sizing: border-box; }
      html, body {
        width: 100%; height: 100%; font-family: 'Times New Roman', Times, serif;
        font-size: 12px; line-height: 1.4; color: #333; background: white;
        -webkit-print-color-adjust: exact; print-color-adjust: exact;
      }
      .page {
        width: 100%; height: 100vh; background: white; padding: 12px;
        position: relative; display: flex; flex-direction: column;
      }
      .header { margin-bottom: 10px; flex-shrink: 0; }
      .logo-section {
        text-align: right; margin-bottom: 8px; height: 40px;
        display: flex; justify-content: flex-end; align-items: center;
      }
      .header-logo {
        max-height: 40px; max-width: 200px; width: auto;
        height: auto; object-fit: contain;
      }
      .logo-central-pattana {
        font-family: Arial, sans-serif; font-size: 16px;
        font-weight: bold; letter-spacing: 1px;
      }
      .logo-central { color: #000; }
      .logo-pattana { color: #C5A572; }
      .header-box {
        border: 2px solid #000; border-radius: 0;
        background: white; width: 100%;
      }
      .title-section {
        background: #fff; padding: 10px;
        text-align: center; border-bottom: 1px solid #000;
      }
      .title-section h1 {
        font-size: 18px; font-weight: bold; color: #000;
        margin: 0; font-family: 'Times New Roman', Times, serif;
      }
      .info-section {
        display: table; width: 100%; padding: 8px;
        background: #fff; min-height: 60px;
      }
      .info-column {
        display: table-cell; width: 50%; vertical-align: top; padding: 0 8px;
      }
      .info-right { border-left: 1px solid #ddd; }
      .info-grid-3 {
        display: grid; grid-template-columns: 1fr 1fr 1fr;
        grid-template-rows: 1fr 1fr; gap: 4px; padding: 8px; min-height: 60px;
      }
      .info-grid-4 {
        display: grid; grid-template-columns: 1fr 1fr;
        grid-template-rows: 1fr 1fr 1fr; gap: 3px; padding: 6px; min-height: 70px;
      }
      .info-item {
        margin-bottom: 4px; font-size: 10px; line-height: 1.2;
        font-family: 'Times New Roman', Times, serif;
        display: flex; 
        align-items: flex-start; /* [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å center ‡πÄ‡∏õ‡πá‡∏ô flex-start */
      }
      .info-grid-3 .info-item,
      .info-grid-4 .info-item {
        font-size: 9px; margin-bottom: 2px;
      }
      .label {
        font-weight: bold; color: #000; display: inline-block;
        min-width: 50px; flex-shrink: 0;
      }
      .info-grid-3 .label,
      .info-grid-4 .label {
        min-width: 40px; font-size: 9px;
      }
      .value {
        color: #333; margin-left: 4px; 
        word-wrap: break-word; 
        overflow-wrap: break-word;
        hyphens: auto; /* [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ */
        min-width: 0;
        flex: 1;
        white-space: pre-line; /* [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡πÉ‡∏´‡πâ \n ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà */
        /* [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î */
        max-height: 3.6em; /* 3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (1.2 line-height √ó 3) */
        overflow: hidden;
        display: -webkit-box;
        -webkit-line-clamp: 3; /* ‡∏à‡∏≥‡∏Å‡∏±‡∏î 3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î */
        -webkit-box-orient: vertical;
      }
      .photos-grid {
        width: 100%; overflow: hidden; flex: 1;
        display: flex; flex-direction: column;
        gap: 15px; /* [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ gap ‡πÅ‡∏ó‡∏ô space-between */
        margin-top: 5px; 
        min-height: 600px; /* [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ min-height ‡πÅ‡∏ó‡∏ô max-height */
      }
      .photo-row {
        display: flex; 
        flex: 1; /* [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡πÅ‡∏ö‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡πÜ ‡∏Å‡∏±‡∏ô */
        margin-bottom: 0;
        justify-content: flex-start; 
      }
      .photo-row:last-child { margin-bottom: 0; }
      .photo-frame {
        flex: 1; display: flex; flex-direction: column;
        margin: 0 3px; max-width: 50%;
      }
      /* [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡∏Ç‡∏ô‡∏≤‡∏î 50% ‡πÑ‡∏°‡πà‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏° */
      .photo-row .photo-frame:only-child {
        flex: 0 0 50%; /* [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÑ‡∏°‡πà‡∏Ç‡∏¢‡∏≤‡∏¢, ‡∏Ñ‡∏á‡∏Ç‡∏ô‡∏≤‡∏î 50% */
        max-width: 50%; /* [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà 50% */
      }
      .photo-frame:first-child { margin-left: 0; }
      .photo-frame:last-child { margin-right: 0; }
      .photo-container {
        flex: 1; background: white; text-align: center;
        position: relative; overflow: hidden; display: flex;
        align-items: center; justify-content: center; min-height: 0;
      }
      .photo-image {
        max-width: 95%; max-height: 95%; width: auto;
        height: auto; object-fit: contain;
      }
      .photo-placeholder {
        width: 100%; height: 100%; display: flex; align-items: center;
        justify-content: center; background: #f0f0f0; color: #999;
        font-style: italic; font-family: 'Times New Roman', Times, serif;
      }
      .photo-caption {
        background: white; text-align: center; font-size: 9px;
        line-height: 1.2; font-family: 'Times New Roman', Times, serif;
        padding: 3px 2px; min-height: 35px; display: flex;
        align-items: center; justify-content: center; flex-shrink: 0;
      }
      .photo-number {
        font-weight: bold; color: #000; margin-right: 3px;
      }
      .photo-title {
        color: #333; word-wrap: break-word; text-align: center;
      }
      @media print {
        .page {
          page-break-after: always; margin: 0;
          padding: 12px; height: 100vh;
        }
        .page:last-child { page-break-after: avoid; }
        .photo-image {
          print-color-adjust: exact; -webkit-print-color-adjust: exact;
        }
      }
    </style>
  `;
}


// ========================================
// [‡∏•‡∏ö V11] - ‡∏•‡∏ö HTML Generation (Daily)
// ========================================
// (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô createDailyHTML ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)


// ========================================
// HTML OPTIMIZATION (V11 - Unchanged)
// ========================================

function createOptimizedHTML(
  reportData: PDFReportData,
  settings: ReportSettings,
  logoBase64: string | null
): string {
  const { photos } = reportData;
  
  // ‚úÖ (Unchanged)
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô "photosPerPage" ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å "‡∏¢‡∏±‡∏î" ‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏¢
  // index.ts (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô qcPhotosPerPage ‡∏´‡∏£‡∏∑‡∏≠ dailyPhotosPerPage)
  const photosPerPage = settings.photosPerPage || 6;
  const pages: PhotoData[][] = [];

  for (let i = 0; i < photos.length; i += photosPerPage) {
    pages.push(photos.slice(i, i + photosPerPage));
  }
  
  if (pages.length === 0) {
      pages.push([]);
  }

  const pageHTML = pages.map((pagePhotos, pageIndex) => `
    <div class="page" ${pageIndex < pages.length - 1 ? 'style="page-break-after: always;"' : ''}>
      ${createDynamicHeader(reportData, pageIndex + 1, pages.length, settings, logoBase64)}
      ${createPhotosGrid(pagePhotos, pageIndex, photosPerPage)}
    </div>
  `).join('');

  return `
    <!DOCTYPE html>
    <html lang="th">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</title> ${getInlineCSS()}
    </head>
    <body>
      ${pageHTML}
    </body>
    </html>
  `;
}

// ========================================
// MAIN EXPORTED FUNCTIONS (V11)
// ========================================

// (getUploadedTopicStatus - Unchanged)
export async function getUploadedTopicStatus(
  projectId: string, category: string, dynamicFields: Record<string, string>
): Promise<Record<string, boolean>> {
  const db = admin.firestore();
  let query = db.collection('qcPhotos').where('projectId', '==', projectId).where('category', '==', category);
  Object.entries(dynamicFields).forEach(([key, value]) => {
    if (key && value) query = query.where(`dynamicFields.${key}`, '==', value);
  });
  const snapshot = await query.get();
  const uploadedTopics: Record<string, boolean> = {};
  snapshot.forEach(doc => {
    const topic = doc.data().topic;
    if (topic && !uploadedTopics[topic]) uploadedTopics[topic] = true;
  });
  return uploadedTopics;
}

// (getDailyPhotosByDate - Unchanged)
export const getDailyPhotosByDate = async (
    projectId: string, date: string
): Promise<DailyPhotoWithBase64[]> => {
    const db = admin.firestore();
    const startDate = new Date(`${date}T00:00:00+07:00`);
    const endDate = new Date(startDate);
    endDate.setDate(startDate.getDate() + 1);
    const photosSnapshot = await db
        .collection("dailyPhotos")
        .where("projectId", "==", projectId)
        .where("createdAt", ">=", Timestamp.fromDate(startDate))
        .where("createdAt", "<", Timestamp.fromDate(endDate))
        .orderBy("createdAt", "asc")
        .get();
    if (photosSnapshot.empty) return [];
    const photosToLoad: PhotoData[] = photosSnapshot.docs.map(doc => {
        const data = doc.data() as FirestorePhotoData;
        let isoTimestamp = new Date().toISOString();
        if (data.createdAt && typeof (data.createdAt as any).toDate === 'function') {
           isoTimestamp = (data.createdAt as admin.firestore.Timestamp).toDate().toISOString();
        }
        return {
            topic: data.description || '', storageUrl: data.filePath,
            isPlaceholder: false, location: data.location || '',
            timestamp: isoTimestamp
        } as PhotoData;
    });
    const photosWithBase64 = await loadImagesFromStorage(photosToLoad);
    return photosWithBase64.map(photo => ({
        description: photo.topic, base64: photo.imageBase64 || null,
        location: photo.location || '', timestamp: photo.timestamp || ''
    }));
};

export async function getTopicsForFilter(
  db: admin.firestore.Firestore,
  projectId: string, 
  mainCategory: string, 
  subCategory: string
): Promise<string[]> {
  try {
    const projectConfigRef = db.collection("projectConfig").doc(projectId);

    // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Main Category ID
    const mainCatSnap = await projectConfigRef.collection("mainCategories")
      .where("name", "==", mainCategory).limit(1).get();
    if (mainCatSnap.empty) {
      throw new Error("Main category not found.");
    }
    const mainCatId = mainCatSnap.docs[0].id;

    // 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Sub Category ID
    const subCatSnap = await projectConfigRef.collection("subCategories")
      .where("name", "==", subCategory)
      .where("mainCategoryId", "==", mainCatId)
      .limit(1).get();
    if (subCatSnap.empty) {
      throw new Error("Sub category not found.");
    }
    const subCatId = subCatSnap.docs[0].id;

    // 3. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Topics ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const topicsSnap = await projectConfigRef.collection("topics")
      .where("subCategoryId", "==", subCatId)
      .where("isArchived", "==", false)
      .get();
      
    const allTopics: string[] = topicsSnap.docs.map(doc => doc.data().name as string);
    return allTopics;

  } catch (error) {
    console.error('Error in getTopicsForFilter:', error);
    return []; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤ Error
  }
}

// (getLatestPhotos - Unchanged)
export async function getLatestPhotos(
  projectId: string, mainCategory: string, subCategory: string,
  allTopics: string[], dynamicFields: Record<string, string>
): Promise<PhotoData[]> {
  try {
    const category = `${mainCategory} > ${subCategory}`;
    const db = admin.firestore();
    let query = db.collection('qcPhotos').where('projectId', '==', projectId).where('category', '==', category).orderBy('createdAt', 'desc');
    Object.entries(dynamicFields).forEach(([key, value]) => {
      if (key && value) query = query.where(`dynamicFields.${key}`, '==', value);
    });
    const snapshot = await query.get();
    if (snapshot.empty) return [];
    const latestPhotosMap = new Map<string, FirestorePhotoData>();
    snapshot.docs.forEach(doc => {
      const data = doc.data() as FirestorePhotoData;
      const topic = data.topic;
      if (topic && allTopics.includes(topic)) {
        if (!latestPhotosMap.has(topic)) latestPhotosMap.set(topic, data);
      }
    });
    const photosToLoad: PhotoData[] = [];
    latestPhotosMap.forEach((data, topic) => {
      photosToLoad.push({
        topic: topic, originalTopic: topic, imageBase64: null,
        storageUrl: data.filePath, isPlaceholder: false,
      });
    });
    return await loadImagesFromStorage(photosToLoad);
  } catch (error) {
    console.error('‚ùå Error getting latest QC photos:', error);
    return [];
  }
}

// (createFullLayout - Unchanged)
export function createFullLayout(allTopics: string[], foundPhotos: PhotoData[]): FullLayoutPhoto[] {
  const photosByTopic = new Map<string, PhotoData>();
  foundPhotos.forEach(photo => {
    const key = photo.originalTopic || photo.topic;
    if (key) photosByTopic.set(key, photo);
  });
  const fullLayout: FullLayoutPhoto[] = allTopics.map((topic, index) => {
    const photo = photosByTopic.get(topic);
    if (photo && !photo.isPlaceholder) {
      return { ...photo, topic: topic, topicOrder: index + 1, originalTopic: topic };
    } else {
      return {
        topic: topic, topicOrder: index + 1, imageBase64: null,
        isPlaceholder: true, originalTopic: topic
      };
    }
  });
  return fullLayout;
}

// (generatePDF (QC Wrapper) - Unchanged)
export async function generatePDF(
  reportData: ReportData, 
  photos: FullLayoutPhoto[],
  settings: ReportSettings
): Promise<Buffer> {
  const logoBase64 = await fetchLogoAsBase64(settings.projectLogoUrl);
  const pdfData: PDFReportData = {
    photos: photos,
    projectName: reportData.projectName,
    category: `${reportData.mainCategory}\n${reportData.subCategory}`, // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ \n ‡πÅ‡∏ó‡∏ô >
    dynamicFields: reportData.dynamicFields,
  };
  return await generateOptimizedPDF(pdfData, settings, logoBase64);
}

// ‚úÖ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç V11] - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Daily Wrapper
export async function generateDailyPDFWrapper(
  reportData: ReportDataDaily, 
  photos: DailyPhotoWithBase64[],
  settings: ReportSettings // (‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ dailySettings ‡∏ó‡∏µ‡πà‡∏°‡∏µ photosPerPage ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)
): Promise<Buffer> {
    
  console.log('üîÑ [V11] Using GRID layout for Daily Report.');

  // 1. [‡πÉ‡∏´‡∏°‡πà] ‡πÅ‡∏õ‡∏•‡∏á DailyPhotoWithBase64[] ‚ûú FullLayoutPhoto[]
  const transformedPhotos: FullLayoutPhoto[] = photos.map((photo, index) => {
    return {
      topic: photo.description || `‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${index + 1}`, // (‡∏Ñ‡∏≥‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢ ‚ûú ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠)
      topicOrder: index + 1,
      imageBase64: photo.base64,
      isPlaceholder: !photo.base64,
      originalTopic: photo.description || `‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${index + 1}`,
    };
  });
  
  // 2. [‡πÉ‡∏´‡∏°‡πà] ‡∏™‡∏£‡πâ‡∏≤‡∏á PDFReportData (‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö QC)
  // (‡πÅ‡∏õ‡∏•‡∏á Date ‚ûú Category ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Header ‡∏Ç‡∏≠‡∏á QC ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ)
  const thaiDate = new Date(reportData.date).toLocaleDateString('th-TH', { dateStyle: 'long' });
  const pdfData: PDFReportData = {
    photos: transformedPhotos,
    projectName: reportData.projectName,
    category: `‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô (${thaiDate})`, // (‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô)
    dynamicFields: {} // (Daily ‡πÑ‡∏°‡πà‡∏°‡∏µ Dynamic Fields)
  };

  // 3. [‡πÉ‡∏´‡∏°‡πà] ‡∏î‡∏∂‡∏á Logo
  const logoBase64 = await fetchLogoAsBase64(settings.projectLogoUrl);
  
  // 4. [‡πÉ‡∏´‡∏°‡πà] ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏Ç‡∏≠‡∏á QC (generateOptimizedPDF)
  //    ‡πÅ‡∏ó‡∏ô‡∏ï‡∏±‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á Daily ‡πÄ‡∏î‡∏¥‡∏°
  return await generateOptimizedPDF(pdfData, settings, logoBase64); 
}


// (uploadPDFToStorage - Unchanged)
export async function uploadPDFToStorage(
  pdfBuffer: Buffer, 
  reportData: any, 
  reportType: 'QC' | 'Daily',
  stableFilename?: string // <-- [‡πÉ‡∏´‡∏°‡πà] 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° Argument ‡∏ó‡∏µ‡πà 4
): Promise<{ filename: string; publicUrl: string; filePath: string }> {
  try {
    const bucket = admin.storage().bucket();
    let filename: string;
    let filePath: string;
    const basePath = `projects/${reportData.projectId}/reports`; // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] 2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Path ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô projects/
    
    // ‚úÖ [‡πÉ‡∏´‡∏°‡πà] 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ stableFilename ‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (stableFilename) {
      filename = stableFilename; // 3.1 ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏•‡∏¢
    } else {
      // 3.2 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ (Fallback) ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡∏°‡∏µ Timestamp (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
      const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
      if (reportType === 'QC') {
        const { mainCategory, subCategory, dynamicFields = {} } = reportData as ReportData;
        const dynamicFieldsStr = Object.values(dynamicFields).filter(v => v).join('_') || 'all';
        const catPath = `${mainCategory.replace(/\s/g, '_')}_${subCategory.replace(/\s/g, '_')}`;
        filename = `QC-Report_${catPath}_${dynamicFieldsStr}_${timestamp}.pdf`;
      } else {
        const { date } = reportData as ReportDataDaily;
        filename = `Daily-Report_${date}_${timestamp}.pdf`;
      }
    }

    // ‚úÖ [‡πÉ‡∏´‡∏°‡πà] 4. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Path ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á (‡∏¢‡πâ‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏•‡∏á‡∏°‡∏≤)
    if (reportType === 'QC') {
      const { mainCategory, subCategory } = reportData as ReportData;
      // ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ slugify (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠ replace ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
      const safeMainCat = (mainCategory || 'qc-reports').replace(/\s/g, '_');
      const safeSubCat = (subCategory || 'unknown').replace(/\s/g, '_');
      filePath = `${basePath}/QC/${safeMainCat}/${safeSubCat}/${filename}`; // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏à‡∏±‡∏î Path ‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    } else {
      const { date } = reportData as ReportDataDaily;
      filePath = `${basePath}/Daily/${date}/${filename}`; // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏à‡∏±‡∏î Path ‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    }

    const file = bucket.file(filePath);
    await file.save(pdfBuffer, {
      metadata: {
        contentType: 'application/pdf',
        cacheControl: 'public, max-age=300', // <-- [‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥] ‡∏•‡∏î Cache Control ‡∏•‡∏á
        metadata: { // <-- Metadata ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
          projectId: reportData.projectId, reportType: reportType,
          mainCategory: (reportData as ReportData).mainCategory || '',
          subCategory: (reportData as ReportData).subCategory || '',
          date: (reportData as ReportDataDaily).date || '',
          generatedAt: new Date().toISOString()
        }
      },
      public: true // <-- [‡πÉ‡∏´‡∏°‡πà] 5. ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Public ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ URL ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
    });

    // ‚úÖ [‡πÉ‡∏´‡∏°‡πà] 6. ‡πÉ‡∏ä‡πâ publicUrl() ‡πÅ‡∏ó‡∏ô getSignedUrl()
    // getSignedUrl() ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÅ‡∏ï‡πà publicUrl() ‡∏à‡∏∞‡∏ñ‡∏≤‡∏ß‡∏£ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Public)
    const publicUrl = file.publicUrl();
    
    console.log(`‚úÖ PDF Uploaded/Overwritten: ${filePath}`);

    return { filename, publicUrl: publicUrl, filePath };
    
  } catch (error) {
    console.error('‚ùå Error uploading PDF:', error);
    throw error;
  }
}

// (generateOptimizedPDF (Core Grid Generator) - Unchanged)
export async function generateOptimizedPDF(
  reportData: PDFReportData,
  settings: ReportSettings,
  logoBase64: string | null
): Promise<Buffer> {
  let browser: puppeteer.Browser | null = null;
  let page: puppeteer.Page | null = null;
  try {
    console.log(`üéØ Starting Optimized GRID PDF generation (V11)...`);
    const html = createOptimizedHTML(reportData, settings, logoBase64);
    browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage', '--disable-gpu'] });
    page = await browser.newPage();
    await page.setViewport({ width: 1200, height: 800, deviceScaleFactor: 2 });
    await page.setJavaScriptEnabled(false);
    await page.setContent(html, { waitUntil: ['domcontentloaded'], timeout: 45000 });
    await new Promise(resolve => setTimeout(resolve, 2000));
    const pdfUint8Array = await page.pdf({
      format: 'A4', printBackground: true, preferCSSPageSize: true,
      margin: { top: '12mm', right: '12mm', bottom: '12mm', left: '12mm' },
      timeout: 60000
    });
    console.log(`‚úÖ GRID PDF generated! Size: ${pdfUint8Array.length} bytes`);
    return Buffer.from(pdfUint8Array);
  } catch (error) {
    console.error('‚ùå Error in GRID PDF generation:', error);
    throw error;
  } finally {
    if (page) await page.close();
    if (browser) await browser.close();
  }
}

// ========================================
// [‡∏•‡∏ö V11] - ‡∏•‡∏ö Daily PDF Generator
// ========================================
// (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô generateDailyPDFUsingPuppeteer ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
// Filename: src/App.tsx (REPLACED)

import React, { useState, useEffect, useCallback } from 'react';
import { api, Project, ProjectConfig } from './utils/api';
import Camera from './components/Camera';
import Reports from './components/Reports';
import './App.css'; // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ CSS ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡∏°‡πà

// ‡πÉ‡∏ä‡πâ Emoji ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á lib ‡πÄ‡∏û‡∏¥‡πà‡∏°
const ICONS = {
  PROJECTS: 'üèóÔ∏è',
  CAMERA: 'üì∑',
  REPORTS: 'üìä',
};

type View = 'projects' | 'camera' | 'reports';

function App() {
  const [projects, setProjects] = useState<Project[]>([]);
  const [selectedProject, setSelectedProject] = useState<Project | null>(null);
  const [projectConfig, setProjectConfig] = useState<ProjectConfig | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // View ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Project ‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ)
  // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 'projects' ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const [view, setView] = useState<View>('projects');

  const fetchProjects = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    const response = await api.getProjects();
    if (response.success && response.data) {
      setProjects(response.data);
      if (response.data.length === 0) {
        setError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô');
      }
    } else {
      setError(response.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£');
    }
    setIsLoading(false);
  }, []);

  const fetchProjectConfig = useCallback(async () => {
    if (!selectedProject) return;
    setIsLoading(true);
    setError(null);
    const response = await api.getProjectConfig(selectedProject.id);
    if (response.success && response.data) {
      setProjectConfig(response.data);
      // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î Config ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πâ‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Camera ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      setView('camera'); 
    } else {
      setError(response.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î Config ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£');
    }
    setIsLoading(false);
  }, [selectedProject]);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  useEffect(() => {
    fetchProjects();
  }, [fetchProjects]);

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î Config
  useEffect(() => {
    if (selectedProject) {
      fetchProjectConfig();
    }
  }, [selectedProject, fetchProjectConfig]);

  const handleSelectProject = (project: Project) => {
    setSelectedProject(project);
    setProjectConfig(null); // ‡∏•‡πâ‡∏≤‡∏á Config ‡πÄ‡∏Å‡πà‡∏≤
  };

  const handleBackToProjects = () => {
    setSelectedProject(null);
    setProjectConfig(null);
    setView('projects');
  };

  // --- Render Logic ---

  if (isLoading && !selectedProject) {
    return <div className="loading-container">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£...</div>;
  }

  if (error) {
    return (
      <div className="error-container">
        <p>{error}</p>
        <button onClick={fetchProjects}>‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</button>
      </div>
    );
  }

  // View 1: ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (Default View)
  if (!selectedProject) {
    return (
      <div className="project-list-container">
        <h1>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£</h1>
        {projects.map((project) => (
          <div
            key={project.id}
            className="project-card"
            onClick={() => handleSelectProject(project)}
          >
            {project.projectName}
          </div>
        ))}
      </div>
    );
  }

  // View 2: ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏≠‡∏õ‡∏´‡∏•‡∏±‡∏Å (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß)
  return (
    <div className="App">
      {/* 1. Top Header (‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß) */}
      <header className="app-header">
        <button className="app-header-back-button" onClick={handleBackToProjects} title="‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"> {/* <-- ‡πÄ‡∏û‡∏¥‡πà‡∏° title */}
          üèóÔ∏è 
        </button>
        <div className="app-header-title" title={selectedProject.projectName}>
          {selectedProject.projectName}
        </div>
        <div style={{ width: '40px' }}></div> {/* Spacer */}
      </header>

      {/* 2. Content Area (‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤) */}
      <main className={view === 'camera' ? 'content-area-full' : 'content-area'}>
        {isLoading && <div className="loading-container">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î Config...</div>}
        
        {view === 'camera' && projectConfig && (
          <Camera
            qcTopics={projectConfig}
            projectId={selectedProject.id}
            projectName={selectedProject.projectName}
          />
        )}
        
        {view === 'reports' && projectConfig && (
          <Reports
            projectId={selectedProject.id}
            projectName={selectedProject.projectName}
            projectConfig={projectConfig}
          />
        )}
      </main>

      {/* 3. Bottom Tab Navigation (‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á) */}
      <nav className="bottom-nav">
        <button
          className={`nav-button ${view === 'camera' ? 'active' : ''}`}
          onClick={() => setView('camera')}
        >
          <span className="icon">{ICONS.CAMERA}</span>
          ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ
        </button>
        <button
          className={`nav-button ${view === 'reports' ? 'active' : ''}`}
          onClick={() => setView('reports')}
        >
          <span className="icon">{ICONS.REPORTS}</span>
          ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        </button>
      </nav>
    </div>
  );
}

export default App;
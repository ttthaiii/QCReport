// Filename: src/App.tsx (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)

import React, { useState, useEffect } from 'react';
import Camera from './components/Camera.tsx';
import Reports from './components/Reports.tsx';
// NEW: Import the interfaces from our api file
import { api, Project, ProjectConfig } from './utils/api.ts'; // ‚úÖ  ‡πÄ‡∏û‡∏¥‡πà‡∏° .ts
import './App.css'; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° .css

const App: React.FC = () => {
  // --- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Type ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö State ---
  const [view, setView] = useState<'camera' | 'reports'>('camera');
  const [projects, setProjects] = useState<Project[]>([]);
  const [selectedProjectId, setSelectedProjectId] = useState<string>('');
  const [projectConfig, setProjectConfig] = useState<ProjectConfig | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  // --- Step 1: Fetch all projects on initial load ---
  useEffect(() => {
    const fetchProjects = async () => {
      try {
        setError(null);
        setIsLoading(true);
        const response = await api.getProjects();
        if (response.success && response.data.length > 0) {
          setProjects(response.data);
          // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
          setSelectedProjectId(response.data[0].id);
        } else if (response.data.length === 0) {
          setError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô");
        } else {
          setError(response.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£");
        }
      } catch (err) {
        console.error("Failed to fetch projects:", err);
        setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ");
      }
    };
    fetchProjects();
  }, []);

  // --- Step 2: Fetch project config whenever a new project is selected ---
  useEffect(() => {
    const fetchProjectConfig = async () => {
      if (!selectedProjectId) return;
      try {
        setError(null);
        setIsLoading(true);
        console.log(`Fetching config for project: ${selectedProjectId}`);
        const response = await api.getProjectConfig(selectedProjectId);
        if (response.success) {
          setProjectConfig(response.data);
        } else {
          setError(response.error || `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ`);
        }
      } catch (err) {
        console.error("Failed to fetch project config:", err);
        setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠");
      } finally {
        setIsLoading(false);
      }
    };
    fetchProjectConfig();
  }, [selectedProjectId]);

  // --- Event Handlers with Types ---
  const handleProjectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedProjectId(e.target.value);
    setProjectConfig(null); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ config ‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
  };

  const selectedProject = projects.find(p => p.id === selectedProjectId);

  // --- Render Logic ---

  if (error) {
    return <div className="container error-container"><h1>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h1><p>{error}</p></div>;
  }

  if (isLoading && !projectConfig) {
    return <div className="container loading-container"><h1>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</h1></div>;
  }

  return (
    <div className="App">
      <header className="App-header">
        <div className="header-left">
          <h1>QC Report</h1>
          <select className="project-selector" value={selectedProjectId} onChange={handleProjectChange} disabled={projects.length === 0}>
            {projects.map(project => (
              <option key={project.id} value={project.id}>
                {project.projectName} ({project.projectCode})
              </option>
            ))}
          </select>
        </div>
        <nav>
          <button onClick={() => setView('camera')} className={view === 'camera' ? 'active' : ''}>
            üì∑ Camera
          </button>
          <button onClick={() => setView('reports')} className={view === 'reports' ? 'active' : ''}>
            üìÑ Reports
          </button>
        </nav>
      </header>
      <main className="container">
        {view === 'camera' && projectConfig && ( // ‚úÖ Added a check for projectConfig
          <Camera
            qcTopics={projectConfig}
            projectId={selectedProjectId}
            projectName={selectedProject?.projectName}
          />
        )}
        {view === 'reports' && <Reports />}
      </main>
    </div>
  );
}

export default App;
// Filename: src/components/AdminConfig.tsx
// (‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå - ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ + ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î)

import React, { useState, useEffect, useRef } from 'react';
import { 
  api, 
  ProjectConfig, 
  MainCategory, 
  SubCategory, 
  Topic,
  ReportSettings 
} from '../utils/api';
import styles from './AdminConfig.module.css'; 

// [‡πÉ‡∏´‡∏°‡πà] 1. Import Component ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞ Type ‡∏à‡∏≤‡∏Å App.tsx
import UserManagement from './UserManagement';
// (‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ export 'interface UserProfile' ‡πÉ‡∏ô App.tsx)
import { UserProfile } from '../App'; 

interface AdminConfigProps {
  projectId: string;
  projectName: string;
  projectConfig: ProjectConfig | null;
  onConfigUpdated: () => void;
  currentUserProfile: UserProfile; // [‡πÉ‡∏´‡∏°‡πà] ‡πÄ‡∏û‡∏¥‡πà‡∏° Prop ‡∏ô‡∏µ‡πâ
}

// (Type ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
type ActiveForm = 
  | 'main'
  | 'sub'
  | 'topic'
  | null;

// (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
const DEFAULT_REPORT_SETTINGS: ReportSettings = {
  layoutType: 'default',
  qcPhotosPerPage: 6,
  dailyPhotosPerPage: 2,
  projectLogoUrl: '',
};

// [‡πÉ‡∏´‡∏°‡πà] 2. State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏•‡∏±‡∏ö Tab
type AdminView = 'config' | 'users';

const AdminConfig: React.FC<AdminConfigProps> = ({ 
  projectId, 
  projectName, 
  projectConfig,
  onConfigUpdated,
  currentUserProfile // [‡πÉ‡∏´‡∏°‡πà] ‡∏£‡∏±‡∏ö Prop ‡∏ô‡∏µ‡πâ
}) => {
  
  // [‡πÉ‡∏´‡∏°‡πà] 3. State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Tab
  const [view, setView] = useState<AdminView>('config');

  // --- ( Logic ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å AdminConfig.tsx ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ) ---
  //
  const [expandedItems, setExpandedItems] = useState<Record<string, boolean>>({});
  const [newName, setNewName] = useState("");
  const [activeForm, setActiveForm] = useState<ActiveForm>(null);
  const [isAdding, setIsAdding] = useState(false);
  const [editingSubCat, setEditingSubCat] = useState<SubCategory | null>(null);
  const [tempFields, setTempFields] = useState<string[]>([]);
  const [reportSettings, setReportSettings] = useState<ReportSettings>(DEFAULT_REPORT_SETTINGS);
  const [logoUploading, setLogoUploading] = useState(false);
  const formRef = useRef<HTMLFormElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  // (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
  useEffect(() => {
    // (Logic ‡πÄ‡∏î‡∏¥‡∏°)
  }, [projectConfig]);

  // (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
  useEffect(() => {
    const fetchSettings = async () => {
      const response = await api.getReportSettings(projectId);
      if (response.success && response.data) {
        setReportSettings(response.data);
      } else {
        console.error("Failed to fetch settings, using default.");
        // @ts-ignore (‡πÉ‡∏ô api.ts, data: DEFAULT_REPORT_SETTINGS ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ï‡∏≠‡∏ô error)
        setReportSettings(response.data || DEFAULT_REPORT_SETTINGS);
      }
    };
    fetchSettings();
  }, [projectId]);

  // (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
  useEffect(() => {
    if (activeForm && formRef.current) {
      const input = formRef.current.querySelector('textarea, input');
      if (input) (input as HTMLElement).focus();
    }
  }, [activeForm]);

  // --- (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: toggleExpand, showAddForm, handle... ) ---
  //
  
  const toggleExpand = (id: string) => {
    setExpandedItems(prev => ({ ...prev, [id]: !prev[id] }));
    setActiveForm(null); // ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏•‡∏±‡∏ö
  };

  const showAddForm = (formType: ActiveForm) => {
    setActiveForm(formType);
    setNewName("");
  };

  const handleAddMain = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newName.trim() || isAdding) return;
    setIsAdding(true);
    const response = await api.addMainCategory(projectId, newName);
    if (response.success) {
      onConfigUpdated();
      setNewName("");
      setActiveForm(null);
    } else {
      alert(`Error: ${response.error}`);
    }
    setIsAdding(false);
  };

  const handleAddSub = async (e: React.FormEvent, mainCat: MainCategory) => {
    e.preventDefault();
    if (!newName.trim() || isAdding) return;
    setIsAdding(true);
    const response = await api.addSubCategory(projectId, mainCat.id, mainCat.name, newName);
     if (response.success) {
      onConfigUpdated();
      setNewName("");
      setActiveForm(null);
    } else {
      alert(`Error: ${response.error}`);
    }
    setIsAdding(false);
  };
  
  const handleAddTopic = async (e: React.FormEvent, mainCat: MainCategory, subCat: SubCategory) => {
    e.preventDefault();
    if (!newName.trim() || isAdding) return;
    
    // (‡πÉ‡∏ä‡πâ \n ‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
    const newTopicNames = newName.split('\n').map(name => name.trim()).filter(name => name.length > 0);
    if (newTopicNames.length === 0) return;

    setIsAdding(true);
    const response = await api.addTopic(projectId, subCat.id, mainCat.name, subCat.name, newTopicNames);
    if (response.success) {
      onConfigUpdated();
      setNewName("");
      setActiveForm(null);
    } else {
      alert(`Error: ${response.error}`);
    }
    setIsAdding(false);
  };

  const handleDelete = async (type: 'main' | 'sub' | 'topic', id: string) => {
    const typeName = type === 'main' ? '‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å' : (type === 'sub' ? '‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢' : '‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠');
    if (!window.confirm(`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö ${typeName} ‡∏ô‡∏µ‡πâ? ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ`)) {
      return;
    }
    
    let response;
    try {
      if (type === 'main') {
        response = await api.deleteMainCategory(projectId, id);
      } else if (type === 'sub') {
        response = await api.deleteSubCategory(projectId, id);
      } else {
        response = await api.deleteTopic(projectId, id);
      }
      
      if (response.success) {
        onConfigUpdated();
      } else {
        alert(`Error: ${response.error}`);
      }
    } catch (error: any) {
      alert(`Error: ${error.message}`);
    }
  };

  const handleEditFields = (subCat: SubCategory) => {
    setEditingSubCat(subCat);
    setTempFields(subCat.dynamicFields || []);
  };

  const handleSaveFields = async () => {
    if (!editingSubCat || isAdding) return;
    setIsAdding(true);
    // (‡πÉ‡∏ä‡πâ \n ‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
    const fieldsToSave = tempFields.map(f => f.trim()).filter(f => f.length > 0);
    const response = await api.updateDynamicFields(projectId, editingSubCat.id, fieldsToSave);
    if (response.success) {
      onConfigUpdated();
      setEditingSubCat(null);
    } else {
      alert(`Error: ${response.error}`);
    }
    setIsAdding(false);
  };
  
  const handleSaveSettings = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!reportSettings) return;
    const response = await api.saveReportSettings(projectId, reportSettings);
    if (response.success) {
      alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!');
    } else {
      alert(`Error: ${response.error}`);
    }
  };
  
  const handleLogoUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file || !reportSettings) return;

    setLogoUploading(true);
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = async () => {
      const base64 = reader.result as string;
      const response = await api.uploadProjectLogo(projectId, base64);
      if (response.success && response.data) {
        setReportSettings({ ...reportSettings, projectLogoUrl: response.data.logoUrl });
        alert('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß!');
      } else {
        alert(`Error uploading logo: ${response.error}`);
      }
      setLogoUploading(false);
    };
    reader.onerror = (error) => {
      alert(`Error reading file: ${error}`);
      setLogoUploading(false);
    };
  };

  // (renderAddForm ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
  const renderAddForm = (
    formType: ActiveForm, 
    onSubmit: (e: React.FormEvent) => void,
    placeholder: string
  ) => (
    <form ref={formRef} className={styles.adminAddForm} onSubmit={onSubmit}>
      {formType === 'topic' ? (
        <textarea
          ref={textareaRef}
          value={newName}
          onChange={(e) => setNewName(e.target.value)}
          placeholder={placeholder}
          rows={5}
          disabled={isAdding}
        />
      ) : (
        <input
          type="text"
          value={newName}
          onChange={(e) => setNewName(e.target.value)}
          placeholder={placeholder}
          disabled={isAdding}
          autoFocus
        />
      )}
      <div className={styles.formActions}>
        <button type="submit" className={`${styles.adminButton} ${styles.submit}`} disabled={isAdding}>
          {isAdding ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'}
        </button>
        <button type="button" className={`${styles.adminButton} ${styles.secondary}`} onClick={() => setActiveForm(null)} disabled={isAdding}>
          ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        </button>
      </div>
    </form>
  );

  // --- ( ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô Logic ‡πÄ‡∏î‡∏¥‡∏° ) ---


  // [‡πÉ‡∏´‡∏°‡πà] 4. Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render Tabs
  const renderTabs = () => (
    <div className={styles.adminTabs}>
      <button 
        className={`${styles.tabButton} ${view === 'config' ? styles.activeTab : ''}`}
        onClick={() => setView('config')}
      >
        üèóÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Config ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
      </button>
      <button 
        className={`${styles.tabButton} ${view === 'users' ? styles.activeTab : ''}`}
        onClick={() => setView('users')}
      >
        üë• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Users)
      </button>
    </div>
  );

  // --- RENDER ‡∏´‡∏•‡∏±‡∏Å ---
  return (
    // (‡πÉ‡∏ä‡πâ Root .adminAccordion ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
    <div className={styles.adminAccordion}> 
      <h2 className={styles.projectNameDisplay}>{projectName}: Admin Panel</h2>
      
      {/* [‡πÉ‡∏´‡∏°‡πà] 5. ‡πÅ‡∏™‡∏î‡∏á Tabs ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà */}
      {renderTabs()}

      {/* [‡πÉ‡∏´‡∏°‡πà] 6. ‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏° Tab ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
      <div className={styles.tabContent}>

        {/* === TAB 1: CONFIG (‡πÇ‡∏Ñ‡πâ‡∏î JSX ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì) === */}
        {view === 'config' && (
          <>
            {/* (‡πÇ‡∏Ñ‡πâ‡∏î JSX ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å AdminConfig.tsx) */}
            {/* */}

            {/* [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] 7. ‡∏¢‡πâ‡∏≤‡∏¢ Report Settings ‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Accordion Item */}
            <div className={styles.accordionItem}>
              <div className={styles.accordionHeader} onClick={() => toggleExpand('reportSettings')}>
                <span>{expandedItems['reportSettings'] ? '‚ñº' : '‚ñ∫'} ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (Report Settings)</span>
              </div>
              {expandedItems['reportSettings'] && (
                <div className={`${styles.accordionContent} ${styles.reportSettingsBox}`}> 
                  {/* (‡πÉ‡∏ä‡πâ class ‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ style ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô) */}
                  <form onSubmit={handleSaveSettings}>
                    <div className={styles.settingGroup}>
                      <h4>Layout</h4>
                      <label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Layout:</label>
                      <select value={reportSettings.layoutType} onChange={e => setReportSettings({...reportSettings, layoutType: e.target.value})}>
                        <option value="default">Default</option>
                      </select>
                    </div>
                    <div className={styles.settingGroup}>
                      <h4>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤</h4>
                      <label>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô QC (1, 2, 4, 6):</label>
                      <input
                        type="number"
                        value={reportSettings.qcPhotosPerPage}
                        onChange={e => setReportSettings({...reportSettings, qcPhotosPerPage: parseInt(e.target.value) as any})}
                        min="1" max="6"
                      />
                      <label>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Daily (1, 2, 4, 6):</label>
                      <input
                        type="number"
                        value={reportSettings.dailyPhotosPerPage}
                        onChange={e => setReportSettings({...reportSettings, dailyPhotosPerPage: parseInt(e.target.value) as any})}
                        min="1" max="6"
                      />
                    </div>
                    <div className={styles.settingGroup}>
                      <h4>‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£</h4>
                      <input type="file" accept="image/png, image/jpeg" onChange={handleLogoUpload} />
                      {logoUploading && <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...</p>}
                      {reportSettings.projectLogoUrl && (
                        <div className={styles.logoPreview}>
                          <img src={reportSettings.projectLogoUrl} alt="Project Logo" style={{ display: 'block' }} />
                        </div>
                      )}
                    </div>
                    <button type="submit" className={`${styles.adminButton} ${styles.manage}`} disabled={logoUploading}>
                      {logoUploading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤'}
                    </button>
                  </form>
                </div>
              )}
            </div>
            {/* [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] 7. ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô Report Settings */}


            {editingSubCat && (
              <div className={styles.modalBackdrop}>
                <div className={styles.modalContent}>
                  <h3>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Dynamic Fields ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {editingSubCat.name}</h3>
                  <p>‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Field (1 ‡∏ä‡∏∑‡πà‡∏≠ ‡∏ï‡πà‡∏≠ 1 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î)</p>
                  <textarea
                    rows={5}
                    value={tempFields.join('\n')}
                    onChange={(e) => setTempFields(e.target.value.split('\n'))}
                  />
                  <div className={styles.formActions}>
                    <button className={`${styles.adminButton} ${styles.submit}`} onClick={handleSaveFields} disabled={isAdding}>
                      {isAdding ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Fields'}
                    </button>
                    <button className={`${styles.adminButton} ${styles.secondary}`} onClick={() => setEditingSubCat(null)} disabled={isAdding}>
                      ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                    </button>
                  </div>
                </div>
              </div>
            )}
            
            {!projectConfig && <p>Loading config...</p>}

            {projectConfig && projectConfig.map((mainCat) => (
              <div key={mainCat.id} className={styles.accordionItem}>
                <div className={styles.accordionHeader} onClick={() => toggleExpand(mainCat.id)}>
                  <span>{expandedItems[mainCat.id] ? '‚ñº' : '‚ñ∫'} {mainCat.name}</span>
                  <button className={`${styles.adminButton} ${styles.delete}`} onClick={(e) => { e.stopPropagation(); handleDelete('main', mainCat.id); }}>‡∏•‡∏ö</button>
                </div>
                {expandedItems[mainCat.id] && (
                  <div className={styles.accordionContent}>
                    {mainCat.subCategories.map((subCat) => (
                      <div key={subCat.id} className={styles.accordionItem}>
                        
                        <div className={styles.accordionHeader} onClick={() => toggleExpand(subCat.id)}>
                          <span>{expandedItems[subCat.id] ? '‚ñΩ' : '‚ñ∑'} {subCat.name}</span>
                          <div>
                            <button className={`${styles.adminButton} ${styles.edit}`} onClick={(e) => { e.stopPropagation(); handleEditFields(subCat); }}>Fields</button>
                            <button className={`${styles.adminButton} ${styles.delete}`} onClick={(e) => { e.stopPropagation(); handleDelete('sub', subCat.id); }}>‡∏•‡∏ö</button>
                          </div>
                        </div>

                        {expandedItems[subCat.id] && (
                          <div className={styles.accordionContent}>
                            {subCat.topics.map((topic) => (
                              <div key={topic.id} className={styles.topicItem}>
                                <span>{topic.name}</span>
                                <button className={`${styles.adminButton} ${styles.delete}`} onClick={(e) => { e.stopPropagation(); handleDelete('topic', topic.id); }}>‡∏•‡∏ö</button>
                              </div>
                            ))}
                            
                            {activeForm === 'topic' ? (
                              renderAddForm('topic', (e) => handleAddTopic(e, mainCat, subCat), '‡∏ß‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ (1 ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ ‡∏ï‡πà‡∏≠ 1 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î)...')
                            ) : (
                              <button className={`${styles.adminButton} ${styles.addNew}`} onClick={() => showAddForm('topic')}>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà</button>
                            )}
                          </div>
                        )}
                      </div>
                    ))}
                    
                    {activeForm === 'sub' ? (
                      renderAddForm('sub', (e) => handleAddSub(e, mainCat), '‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏´‡∏°‡πà...')
                    ) : (
                      activeForm === null && !mainCat.subCategories.some(subCat => expandedItems[subCat.id]) && (
                        <button className={`${styles.adminButton} ${styles.addNew}`} onClick={() => showAddForm('sub')}>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏´‡∏°‡πà</button>
                      )
                    )}
                  </div>
                )}
              </div>
            ))}
            
            <hr className={styles.adminDivider} />
            {activeForm === 'main' ? (
              renderAddForm('main', handleAddMain, '‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà...')
            ) : (
              <button className={`${styles.adminButton} ${styles.addNew}`} onClick={() => showAddForm('main')}>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà</button>
            )}
          </>
        )}
        
        {/* === TAB 2: USER MANAGEMENT (‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà) === */}
        {view === 'users' && (
          <UserManagement currentUserRole={currentUserProfile.role} />
        )}

      </div>
    </div>
  );
};

export default AdminConfig;
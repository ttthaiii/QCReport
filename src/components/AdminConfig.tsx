import React, { useState } from 'react';
// ‡∏î‡∏∂‡∏á Type ‡∏°‡∏≤‡∏à‡∏≤‡∏Å api.ts
import { ProjectConfig } from '../utils/api'; 
// ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ CSS ‡∏à‡∏≤‡∏Å App.css ‡πÅ‡∏•‡∏∞ Reports.tsx ‡∏°‡∏≤‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ

interface AdminConfigProps {
  projectId: string;
  projectName: string;
  projectConfig: ProjectConfig | null;
  onConfigUpdated: () => void; // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Refresh
}

// State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
type AdminView = 
  | { view: 'mainCategories' }
  // | { view: 'subCategories', mainCategory: string } 
  // | { view: 'topics', mainCategory: string, subCategory: string };
  // (‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° subCategories ‡πÅ‡∏•‡∏∞ topics ‡πÉ‡∏ô‡∏™‡πÄ‡∏ï‡πá‡∏õ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)

const AdminConfig: React.FC<AdminConfigProps> = ({ 
  projectId, 
  projectName, 
  projectConfig,
  onConfigUpdated
}) => {
  
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
  const [adminView, setAdminView] = useState<AdminView>({ view: 'mainCategories' });
  
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà"
  const [newMainCategory, setNewMainCategory] = useState("");
  const [isAdding, setIsAdding] = useState(false);
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏≤‡∏Å Prop
  const mainCategories = projectConfig ? Object.keys(projectConfig) : [];

  // ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° API) ==========

  const handleAddMainCategory = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newMainCategory.trim()) return;
    
    setIsAdding(true);
    alert(`(‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API) ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°: ${newMainCategory}\n‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ProjectID: ${projectId}`);
    
    // TODO: ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    // try {
    //   await api.addMainCategory(projectId, newMainCategory);
    //   setNewMainCategory("");
    //   onConfigUpdated(); // ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ App.tsx ‡πÇ‡∏´‡∏•‡∏î config ‡πÉ‡∏´‡∏°‡πà
    // } catch (error) {
    //   alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + (error as Error).message);
    // }
    
    setIsAdding(false);
  };
  
  const handleEditMainCategory = (oldName: string) => {
    // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô)
    // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏∑‡∏≠ Key ‡∏Ç‡∏≠‡∏á Object
    // ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏£‡∏≤‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Document ID ‡πÅ‡∏ó‡∏ô
    alert('‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠" ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n(‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Firestore ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢)');
    // const newName = prompt(`‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "${oldName}":`, oldName);
    // if (newName && newName.trim() && newName !== oldName) {
    //    alert(`(‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API) ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ${oldName} -> ${newName}`);
    // }
  };

  const handleDeleteMainCategory = (name: string) => {
    if (window.confirm(`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö "${name}"?\n(‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏¢‡πà‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏°‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢!)`)) {
       alert(`(‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API) ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö: ${name}`);
       // TODO: ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    }
  };

  // ========== UI Rendering ==========

  const renderMainCategories = () => (
    <div className="report-form-box">
      <h3 style={{ marginTop: 0 }}>üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å (Main Categories)</h3>
      
      {/* --- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà --- */}
      <ul className="admin-list">
        {mainCategories.length === 0 && <li className="admin-list-item">- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å -</li>}
        
        {mainCategories.map((mainName) => (
          <li key={mainName} className="admin-list-item">
            <span className="admin-list-item-name">{mainName}</span>
            <div className="admin-list-item-actions">
              <button 
                className="admin-button edit"
                onClick={() => handleEditMainCategory(mainName)}
              >
                ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
              </button>
              <button 
                className="admin-button manage"
                onClick={() => alert('TODO: ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏¢‡πà‡∏≠‡∏¢')}
                // onClick={() => setAdminView({ view: 'subCategories', mainCategory: mainName })}
              >
                ‚û°Ô∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
              </button>
              <button 
                className="admin-button delete"
                onClick={() => handleDeleteMainCategory(mainName)}
              >
                üóëÔ∏è ‡∏•‡∏ö
              </button>
            </div>
          </li>
        ))}
      </ul>
      
      <hr className="admin-divider" />
      
      {/* --- ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà --- */}
      <form onSubmit={handleAddMainCategory}>
        <label className="input-label">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà:</label>
        <div className="admin-input-group">
          <input 
            type="text"
            value={newMainCategory}
            onChange={(e) => setNewMainCategory(e.target.value)}
            placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏á‡∏≤‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á, ‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡πå, ..."
            disabled={isAdding}
          />
          <button type="submit" className="admin-button submit" disabled={isAdding}>
            {isAdding ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'}
          </button>
        </div>
      </form>
    </div>
  );

  // ========== Main Render ==========

  return (
    // ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ className 'report-container' ‡∏à‡∏≤‡∏Å Reports.tsx ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô
    <div className="report-container">
      <h1>‚öôÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Config</h1>
      <p className="project-name-display">‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£: {projectName}</p>
      
      {/* ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏°‡∏≤ (Main -> Sub -> Topic)
        ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡πÅ‡∏Ñ‡πà 'mainCategories' 
      */}
      {adminView.view === 'mainCategories' && renderMainCategories()}
      
      {/* {adminView.view === 'subCategories' && (
        <AdminSubCategories 
          projectConfig={projectConfig}
          mainCategory={adminView.mainCategory}
          onBack={() => setAdminView({ view: 'mainCategories' })}
        />
      )} 
      */}
      
    </div>
  );
};

export default AdminConfig;
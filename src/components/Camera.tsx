// Filename: src/components/Camera.tsx (REPLACED - V5 - Persistent State)

import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';
import { api, UploadPhotoData, ProjectConfig } from '../utils/api';
import { addWatermark, WatermarkOptions } from '../utils/watermark';
import './Camera.css';

interface CameraProps {
  qcTopics: ProjectConfig | null;
  projectId: string;
  projectName: string | undefined;
}

interface Geolocation {
  latitude: number;
  longitude: number;
}

// 1. [‡πÉ‡∏´‡∏°‡πà] ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á" ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô localStorage
interface PersistentJob {
  id: string;
  label: string;
  reportType: 'QC' | 'Daily';
  mainCategory: string;
  subCategory: string;
  dynamicFields: Record<string, string>;
  description: string;
  completedTopics: number; // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°]
  totalTopics: number;     // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°]
}

// 2. [‡πÉ‡∏´‡∏°‡πà] Helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö localStorage
const RECENT_JOBS_KEY = 'qc-recent-jobs';

const getRecentJobs = (projectId: string): PersistentJob[] => { // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
  try {
    const data = localStorage.getItem(`${RECENT_JOBS_KEY}_${projectId}`);
    return data ? JSON.parse(data) : [];
  } catch (e) {
    return [];
  }
};

const saveRecentJob = ( // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  projectId: string,
  job: Omit<PersistentJob, 'completedTopics' | 'totalTopics'>, // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
  completedTopics: number, // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] Parameter
  totalTopics: number      // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] Parameter
) => {
  const jobs = getRecentJobs(projectId);
  const otherJobs = jobs.filter(j => j.id !== job.id);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  const jobToSave: PersistentJob = { // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏ó‡∏µ‡πà‡∏°‡∏µ Progress
      ...job,
      completedTopics,
      totalTopics
  };

  const updatedJobs = [jobToSave, ...otherJobs].slice(0, 5);
  localStorage.setItem(`${RECENT_JOBS_KEY}_${projectId}`, JSON.stringify(updatedJobs));
};

// 3. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á Wizard (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
type WizardStep = 
  | 'type'          // 1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  | 'mainCat'       // 2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Main Category
  | 'subCat'        // 3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sub Category
  | 'dynamicFields' // 4. ‡∏Å‡∏£‡∏≠‡∏Å Dynamic Fields
  | 'topicList'     // 5. ‡∏´‡∏ô‡πâ‡∏≤ Checklist ‡∏Ç‡∏≠‡∏á Topics
  | 'dailyReview'     // 5b. (Daily) ‡∏Å‡∏£‡∏≠‡∏Å Description
  | 'camera'        // 6. ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
  | 'uploading';    // 7. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î

const Camera: React.FC<CameraProps> = ({ qcTopics, projectId, projectName }) => {
  // --- State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Wizard ---
  const [step, setStep] = useState<WizardStep>('type');

  // --- State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ ---
  const streamRef = useRef<MediaStream | null>(null);
  const [tempPhoto, setTempPhoto] = useState<string | null>(null); 
  const [photoQueue, setPhotoQueue] = useState<Map<string, string>>(new Map()); 
  const [currentTopic, setCurrentTopic] = useState<string>(''); 
  const [isUploading, setIsUploading] = useState<boolean>(false);
  const [uploadStatus, setUploadStatus] = useState<string>('');
  const [location, setLocation] = useState<Geolocation | string | null>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);

  // --- 4. [‡πÉ‡∏´‡∏°‡πà] State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á" ---
  const [recentJobs, setRecentJobs] = useState<PersistentJob[]>([]); // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] State ‡πÉ‡∏´‡∏°‡πà
  const [uploadedStatus, setUploadedStatus] = useState<Map<string, boolean>>(new Map()); // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] State ‡πÉ‡∏´‡∏°‡πà
  const [isChecklistLoading, setIsChecklistLoading] = useState(false);

  // --- State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
  const [selectedMainCategory, setSelectedMainCategory] = useState<string>('');
  const [selectedSubCategory, setSelectedSubCategory] = useState<string>('');
  const [reportType, setReportType] = useState<'QC' | 'Daily'>('QC');
  const [dailyDescriptions, setDailyDescriptions] = useState<Map<string, string>>(new Map());
  const [dynamicFields, setDynamicFields] = useState<{ [key: string]: string }>({});

  // --- Logic ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
  const mainCategories = useMemo(() => qcTopics ? Object.keys(qcTopics) : [], [qcTopics]);
  const subCategories = useMemo(() =>
    (qcTopics && selectedMainCategory && qcTopics[selectedMainCategory])
      ? Object.keys(qcTopics[selectedMainCategory])
      : [],
    [qcTopics, selectedMainCategory]);
  const currentSubCategoryConfig = useMemo(() => {
    if (qcTopics && selectedMainCategory && selectedSubCategory) {
      return qcTopics[selectedMainCategory]?.[selectedSubCategory];
    }
    return { topics: [], dynamicFields: [] };
  }, [qcTopics, selectedMainCategory, selectedSubCategory]);
  const topics = currentSubCategoryConfig?.topics || [];
  const requiredDynamicFields = currentSubCategoryConfig?.dynamicFields || [];

  useEffect(() => { setRecentJobs(getRecentJobs(projectId)); }, [projectId]);

  // 6. [‡πÉ‡∏´‡∏°‡πà] Helper: ‡∏™‡∏£‡πâ‡∏≤‡∏á Label ‡πÅ‡∏•‡∏∞ ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "Job"
  const getCurrentJobIdentifier = (): { id: string, label: string } => { // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
    if (reportType === 'QC') {
      const fieldValues = Object.values(dynamicFields).filter(Boolean).join('_') || 'default';
      const id = `${selectedMainCategory}_${selectedSubCategory}_${fieldValues}`;
      const label = [selectedMainCategory, selectedSubCategory, ...Object.values(dynamicFields).filter(Boolean)].join(' / ');
      return { id, label: `üìã ${label}` };
    } else {
      // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ Daily ‡∏°‡∏µ ID ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
      const dateStr = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
      return { id: `daily_${dateStr}`, label: '‚òÄÔ∏è ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô' };
    }
  };

  const stopCamera = useCallback(() => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach((track) => track.stop());
      streamRef.current = null;
      console.log("Camera stopped."); // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏° Log
    }
  }, []);

  const startCamera = useCallback(async (videoElement: HTMLVideoElement | null) => {
    if (!videoElement) {
        console.error("Video element is NULL in startCamera.");
        stopCamera();
        return;
    }
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤ stream ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
    if (streamRef.current) {
        console.log("Stream already exists, stopping old one.");
        stopCamera();
    }

    console.log("Attempting to start camera...");
    try {
      const mediaStream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } });
      console.log("getUserMedia successful:", mediaStream);
      streamRef.current = mediaStream; // <-- ‡πÄ‡∏Å‡πá‡∏ö stream ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô ref

      console.log("Setting videoElement.srcObject");
      videoElement.srcObject = mediaStream; // <-- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ srcObject ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Geolocation (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏∏‡∏î)
      navigator.geolocation.getCurrentPosition(
        (position) => setLocation({ latitude: position.coords.latitude, longitude: position.coords.longitude }),
        () => setLocation('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ')
      );
    } catch (error) {
      console.error('ERROR in startCamera:', error);
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ (‡πÇ‡∏õ‡∏£‡∏î‡∏î‡∏π Console)');
      stopCamera(); // <-- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å stopCamera ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î Error
    }
  }, [stopCamera]);
  
  useEffect(() => {
    if (step !== 'camera') {
        stopCamera();
    }
    // Cleanup ‡∏ï‡∏≠‡∏ô unmount
    return () => stopCamera();
  }, [step, stopCamera]);

  const videoCallbackRef = useCallback((node: HTMLVideoElement | null) => {
      // node ‡∏Ñ‡∏∑‡∏≠ <video> element ‡∏ó‡∏µ‡πà Render ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤ unmount)
      if (node && step === 'camera' && !tempPhoto) {
          // ‡∏ñ‡πâ‡∏≤ element ‡∏û‡∏£‡πâ‡∏≠‡∏°, ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô step camera, ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢
          // ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å startCamera ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á element ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
          startCamera(node);
      } else {
          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å step camera) ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î stream
          stopCamera();
      }
  // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏û‡∏¥‡πà‡∏° dependency ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  }, [step, tempPhoto, startCamera, stopCamera]);

  // 7. [‡πÉ‡∏´‡∏°‡πà] Logic: ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Checklist ‡∏à‡∏≤‡∏Å API ---
  const fetchChecklistStatus = useCallback(async ( // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
    mainCat: string,
    subCat: string,
    fields: Record<string, string>
  ) => {
    if (!mainCat || !subCat) return;

    setIsChecklistLoading(true);
    setUploadedStatus(new Map()); // ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡πà‡∏≤
    try {
      const response = await api.getChecklistStatus(projectId, mainCat, subCat, fields);
      if (response.success && response.data) {
        setUploadedStatus(new Map(Object.entries(response.data)));
      } else {
        throw new Error(response.error || 'Failed to fetch status');
      }
    } catch (error) {
      console.error('Error fetching checklist status:', error);
      alert(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô: ${(error as Error).message}`);
    }
    setIsChecklistLoading(false);
  }, [projectId]);

  // 8. [‡πÉ‡∏´‡∏°‡πà] Effect: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ô‡∏µ‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ topicList
  useEffect(() => { // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] Effect ‡πÉ‡∏´‡∏°‡πà
    if (step === 'topicList') {
      fetchChecklistStatus(selectedMainCategory, selectedSubCategory, dynamicFields);
    }
  }, [step, selectedMainCategory, selectedSubCategory, dynamicFields, fetchChecklistStatus]);
  
  // --- Logic ‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢/‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏π‡∏õ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
  const takePhoto = () => {
    // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ videoElement ‡∏à‡∏≤‡∏Å Callback Ref (‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ tempPhoto ‡πÅ‡∏ó‡∏ô)
    const videoNode = document.querySelector('.video-feed') as HTMLVideoElement; // <-- ‡∏´‡∏≤ Element ‡∏ï‡∏£‡∏á‡πÜ (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
    if (videoNode && canvasRef.current && videoNode.readyState >= 2) { // ‡πÄ‡∏ä‡πá‡∏Ñ readyState ‡πÄ‡∏û‡∏¥‡πà‡∏°
      const canvas = canvasRef.current;
      canvas.width = videoNode.videoWidth;
      canvas.height = videoNode.videoHeight;
      const context = canvas.getContext('2d');
      if (context) {
          context.drawImage(videoNode, 0, 0, canvas.width, canvas.height);
          setTempPhoto(canvas.toDataURL('image/jpeg'));
          stopCamera(); // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ñ‡πà‡∏≤‡∏¢
      } else {
          console.error("Failed to get canvas context");
      }
    } else {
        console.error("Cannot take photo: video node not found, canvas ref missing, or video not ready.");
        alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ: ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°");
    }
  };
  const handleRetake = () => { setTempPhoto(null); };

  const handleConfirmPhoto = () => { // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Daily
    if (!tempPhoto) return;
    const timestampKey = `daily_${Date.now()}`; // <-- ‡πÉ‡∏ä‡πâ Timestamp ‡πÄ‡∏õ‡πá‡∏ô Key

    if (reportType === 'QC') {
      const newQueue = new Map(photoQueue);
      newQueue.set(currentTopic, tempPhoto);
      setPhotoQueue(newQueue);
      setTempPhoto(null);
      setStep('topicList');
    } else {
      // --- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] Daily Report ---
      const newQueue = new Map(photoQueue);
      newQueue.set(timestampKey, tempPhoto); // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß
      setPhotoQueue(newQueue);
      setTempPhoto(null); // <-- ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Step! ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ camera ‡∏ï‡πà‡∏≠‡πÑ‡∏õ
      // setStep('dailyReview'); // <-- ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
    }
  };

  // 9. [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] Logic ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---
  const handleUploadAll = async () => {
    if (photoQueue.size === 0) return;
    setIsUploading(true); setUploadStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î 0/${photoQueue.size}...`); setStep('uploading');
    const locationString = typeof location === 'object' && location ? `${location.latitude.toFixed(5)}, ${location.longitude.toFixed(5)}` : (location as string) || '';
    let successCount = 0; const totalPhotosInQueue = photoQueue.size; const topicsJustUploaded = new Map<string, boolean>();

    try {
      const photosToUpload = Array.from(photoQueue.entries()); // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏î‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á Key ‡πÅ‡∏•‡∏∞ Value

      for (const [key, photoBase64] of photosToUpload) { // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ß‡∏ô Loop ‡∏î‡πâ‡∏ß‡∏¢ Key ‡πÅ‡∏•‡∏∞ Value
        if (!photoBase64) continue;

        setUploadStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${successCount + 1}/${totalPhotosInQueue}...`);
        const timestamp = new Date().toISOString(); const watermarkOptions: WatermarkOptions = { location: locationString, timestamp: timestamp }; const watermarkedPhoto = await addWatermark(photoBase64, watermarkOptions);
        setUploadStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${successCount + 1}/${totalPhotosInQueue}...`);

        let descriptionForUpload = '';
        if (reportType === 'Daily') {
          descriptionForUpload = dailyDescriptions.get(key) || ''; // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ State ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        }

        const uploadData: UploadPhotoData = {
          projectId, projectName: projectName || 'N/A', reportType, photoBase64: watermarkedPhoto, timestamp, location: locationString,
          ...(reportType === 'QC'
            ? { mainCategory: selectedMainCategory, subCategory: selectedSubCategory, topic: key, dynamicFields } // <-- QC ‡πÉ‡∏ä‡πâ Key ‡πÄ‡∏õ‡πá‡∏ô Topic
            : { description: descriptionForUpload, dynamicFields: {} } // <-- Daily ‡πÉ‡∏ä‡πâ Description ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏°‡∏≤
          ),
        };

        const response = await api.uploadPhoto(uploadData);
        if (!response.success) throw new Error(`‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏µ‡πà‡∏£‡∏π‡∏õ: ${reportType === 'QC' ? key : `Daily Photo ${successCount + 1}`} (${response.error})`);

        if (reportType === 'QC') {
            topicsJustUploaded.set(key, true); // <-- QC ‡πÄ‡∏Å‡πá‡∏ö Topic ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        }
        successCount++;
      }

      // --- Logic ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ---
      setUploadStatus(`‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${successCount} ‡∏£‡∏π‡∏õ!`);
      const newUploadedStatus = new Map(uploadedStatus); topicsJustUploaded.forEach((value, key) => newUploadedStatus.set(key, value));
      const completedCount = newUploadedStatus.size; const totalTopicCount = topics.length;
      const { id, label } = getCurrentJobIdentifier();

      if (reportType === 'QC') {
        saveRecentJob(projectId, { id, label, reportType, mainCategory: selectedMainCategory, subCategory: selectedSubCategory, dynamicFields, description: '' }, completedCount, totalTopicCount);
        setRecentJobs(getRecentJobs(projectId));
      } else {
         // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Daily ‡∏•‡∏á Recent Jobs (‡∏ï‡∏≤‡∏° Logic ‡πÄ‡∏î‡∏¥‡∏°)
      }

      setTimeout(() => {
        setPhotoQueue(new Map());
        setDailyDescriptions(new Map()); // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ State ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        setIsUploading(false); setUploadStatus('');
        setUploadedStatus(newUploadedStatus);
        setStep('type');
      }, 2000);

    } catch (error) { console.error('Upload failed:', error); setUploadStatus(`‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${(error as Error).message}`); setIsUploading(false); }
  };


  // --- Logic ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Wizard ---

  const resetAllState = () => {
    setTempPhoto(null); setPhotoQueue(new Map()); setCurrentTopic(''); setUploadStatus('');
    // setDescription(''); // <-- [‡∏•‡∏ö] ‡∏•‡∏ö State description ‡∏ï‡∏±‡∏ß‡πÄ‡∏Å‡πà‡∏≤
    setDailyDescriptions(new Map()); // <-- ‡πÉ‡∏ä‡πâ State ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ó‡∏ô
    setSelectedMainCategory(''); setSelectedSubCategory(''); setDynamicFields({});
    setUploadedStatus(new Map()); setStep('type'); setRecentJobs(getRecentJobs(projectId));
  };

  const handleDynamicFieldChange = (fieldName: string, value: string) => {
    setDynamicFields(prev => ({ ...prev, [fieldName]: value }));
  };

  const handleSelectReportType = (type: 'QC' | 'Daily') => { // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] Daily ‡πÑ‡∏õ Camera
      resetAllState();
      setReportType(type);
      if (type === 'QC') setStep('mainCat');
      else setStep('camera'); // <-- ‡πÑ‡∏õ Camera ‡πÄ‡∏•‡∏¢
  };

  const handleSelectMainCat = (mainCat: string) => {
    setSelectedMainCategory(mainCat);
    setSelectedSubCategory('');
    setPhotoQueue(new Map());
    setUploadedStatus(new Map());
    setStep('subCat');
  };

  const handleSelectSubCat = (subCat: string) => {
    setSelectedSubCategory(subCat);
    setPhotoQueue(new Map());
    setUploadedStatus(new Map());
    
    const config = qcTopics?.[selectedMainCategory]?.[subCat];
    if (config?.dynamicFields && config.dynamicFields.length > 0) {
      setStep('dynamicFields');
    } else {
      setStep('topicList');
    }
  };

  const handleDynamicFieldsSubmit = () => {
    setPhotoQueue(new Map());
    setUploadedStatus(new Map());
    setStep('topicList');
  };
  
  const handleStartPhotoForTopic = (topic: string) => {
    setCurrentTopic(topic);
    setStep('camera');
  };

  // --- [‡πÉ‡∏´‡∏°‡πà] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Daily Description ---
  const handleDailyDescriptionChange = (photoKey: string, text: string) => {
    const newDescriptions = new Map(dailyDescriptions); // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ State ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    newDescriptions.set(photoKey, text);
    setDailyDescriptions(newDescriptions); // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ State ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  };

  // --- [‡πÉ‡∏´‡∏°‡πà] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏£‡∏π‡∏õ Daily ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß ---
  const handleDeleteDailyPhoto = (photoKey: string) => {
    const newQueue = new Map(photoQueue);
    const newDescriptions = new Map(dailyDescriptions); // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ State ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    newQueue.delete(photoKey);
    newDescriptions.delete(photoKey);
    setPhotoQueue(newQueue);
    setDailyDescriptions(newDescriptions); // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ State ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  };

  // 10. [‡πÉ‡∏´‡∏°‡πà] ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Job" ‡∏à‡∏≤‡∏Å localStorage
  const handleSelectRecentJob = (job: PersistentJob) => {
    if (job.reportType === 'QC') {
        setReportType('QC'); setSelectedMainCategory(job.mainCategory); setSelectedSubCategory(job.subCategory); setDynamicFields(job.dynamicFields);
        setPhotoQueue(new Map()); setUploadedStatus(new Map()); setStep('topicList');
    } else {
        setReportType('Daily');
        // setDescription(job.description || ''); // <-- [‡∏•‡∏ö] ‡πÑ‡∏°‡πà‡∏°‡∏µ State description ‡∏ï‡∏±‡∏ß‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß
        setPhotoQueue(new Map()); setDailyDescriptions(new Map()); // <-- ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå Map ‡πÅ‡∏ó‡∏ô
        setStep('camera');
    }
  };

  const goBack = () => { // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ï‡∏≤‡∏° Logic ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    if (isUploading) return;
    switch (step) {
      case 'mainCat': setStep('type'); break;
      case 'subCat': setStep('mainCat'); break;
      case 'dynamicFields': setStep('subCat'); break;
      case 'topicList': setStep('type'); break; // <-- ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
      case 'dailyReview': setStep('camera'); break; // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] Review ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Camera
      case 'camera':
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å QC -> ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ topicList
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å Daily -> ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ type
        if (reportType === 'QC') setStep('topicList');
        else setStep('type');
        break;
      default:
        setStep('type');
    }
  };

  // --- Render ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Wizard ---
  const renderChecklistHeader = () => {
    if (reportType === 'QC') {
      const parts = [selectedMainCategory, selectedSubCategory, ...Object.values(dynamicFields)];
      return <div className="checklist-header">{parts.filter(Boolean).join(' / ')}</div>;
    }
    return null;
  };

  const renderDailyReviewItem = ([key, photoBase64]: [string, string]) => (
    <div key={key} className="daily-review-item"> {/* <-- ‡πÉ‡∏ä‡πâ Class ‡πÉ‡∏´‡∏°‡πà */}
      <img src={photoBase64} alt={`Daily ${key}`} className="daily-review-thumbnail" /> {/* <-- ‡πÉ‡∏ä‡πâ Class ‡πÉ‡∏´‡∏°‡πà */}
      <textarea
        value={dailyDescriptions.get(key) || ''}
        onChange={(e) => handleDailyDescriptionChange(key, e.target.value)}
        placeholder="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢ (Optional)..."
        rows={3} // <-- ‡∏•‡∏î rows ‡∏•‡∏á‡πÑ‡∏î‡πâ
        className="daily-review-textarea" // <-- ‡πÉ‡∏ä‡πâ Class ‡πÉ‡∏´‡∏°‡πà
      />
      <button onClick={() => handleDeleteDailyPhoto(key)} className="daily-review-delete-button">üóëÔ∏è</button> {/* <-- ‡πÉ‡∏ä‡πâ Class ‡πÉ‡∏´‡∏°‡πà, ‡πÄ‡∏≠‡∏≤‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ ‡∏•‡∏ö ‡∏≠‡∏≠‡∏Å */}
    </div>
  );

  return (
    <div className="wizard-container">
      
      {/* 1. Step: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) */}
      {step === 'type' && (
        <div className="wizard-step">
          <h2>1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</h2>
          <div className="selection-grid">
            <div className="selection-card" onClick={() => handleSelectReportType('QC')}>
              <span style={{fontSize: '2rem'}}>üìã</span>
              <p>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô QC (‡∏ï‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠)</p>
            </div>
            <div className="selection-card daily" onClick={() => handleSelectReportType('Daily')}>
              <span style={{fontSize: '2rem'}}>‚òÄÔ∏è</span>
              <p>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô (Daily)</p>
            </div>
          </div>

          {/* --- 11. [‡πÉ‡∏´‡∏°‡πà] ‡πÅ‡∏™‡∏î‡∏á "‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á" --- */}
          {recentJobs.length > 0 && (
            <div className="recent-jobs-container">
              <h3>üìå ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà</h3>
              {recentJobs.map((job) => (
                <div
                  key={job.id}
                  className="recent-job-item"
                  onClick={() => handleSelectRecentJob(job)} // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ handleSelectRecentJob
                >
                  {/* ‡πÅ‡∏™‡∏î‡∏á Label */}
                  <span>{job.label}</span>
                  {/* ‡πÅ‡∏™‡∏î‡∏á Progress ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ QC ‡πÅ‡∏•‡∏∞‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
                  {job.reportType === 'QC' && job.totalTopics > 0 && (
                     <span className="job-progress">
                       (‡∏ñ‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß {job.completedTopics}/{job.totalTopics})
                     </span>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {/* 2. Step: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Main Category */}
      {step === 'mainCat' && (
        <div className="wizard-step">
          <h2>2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å</h2>
          {renderChecklistHeader()}
          <div className="selection-grid">
            {mainCategories.map((mainCat) => (
              <div key={mainCat} className="selection-card" onClick={() => handleSelectMainCat(mainCat)}>
                {mainCat}
              </div>
            ))}
          </div>
          <div className="wizard-nav">
            <button className="wizard-button secondary" onClick={goBack}>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</button>
          </div>
        </div>
      )}
      
      {/* 3. Step: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sub Category */}
      {step === 'subCat' && (
        <div className="wizard-step">
          <h2>3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢</h2>
          {renderChecklistHeader()}
          <div className="selection-grid">
            {subCategories.map((subCat) => (
              <div key={subCat} className="selection-card" onClick={() => handleSelectSubCat(subCat)}>
                {subCat}
              </div>
            ))}
          </div>
          <div className="wizard-nav">
            <button className="wizard-button secondary" onClick={goBack}>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</button>
          </div>
        </div>
      )}

      {/* 4. Step: ‡∏Å‡∏£‡∏≠‡∏Å Dynamic Fields */}
      {step === 'dynamicFields' && (
        <div className="wizard-step">
          <h2>4. ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</h2>
          {renderChecklistHeader()}
          {requiredDynamicFields.map((fieldName) => (
            <div className="form-group" key={fieldName}>
              <label>{fieldName}</label>
              <input
                type="text"
                value={dynamicFields[fieldName] || ''}
                onChange={(e) => handleDynamicFieldChange(fieldName, e.target.value)}
                placeholder={`‡∏£‡∏∞‡∏ö‡∏∏${fieldName}...`}
              />
            </div>
          ))}
          <div className="wizard-nav">
            <button className="wizard-button secondary" onClick={goBack}>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</button>
            <button className="wizard-button" onClick={handleDynamicFieldsSubmit}>‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</button>
          </div>
        </div>
      )}

      {/* 5. [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] Step: Topic Checklist */}
      {step === 'topicList' && (
        <div className="wizard-step">
          <h2>5. ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ï‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠</h2>
          {renderChecklistHeader()}

          {isChecklistLoading ? ( // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡πÅ‡∏™‡∏î‡∏á Loading ‡∏ï‡∏≠‡∏ô‡∏£‡∏≠ API
            <div className="loading-container" style={{height: '50vh'}}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞...</div>
          ) : (
            <>
              <div className="topic-list">
                {topics.map((topic) => {
                  // 10. [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] Logic ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‚úÖ/üîÑ/‚ö™Ô∏è
                  const isQueued = photoQueue.has(topic); // ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏£‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
                  const isUploaded = uploadedStatus.has(topic); // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏≤‡∏Å API)

                  const statusIcon = isUploaded ? '‚úÖ' : (isQueued ? 'üîÑ' : '‚ö™Ô∏è');
                  // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà (üîÑ) ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà üì∑
                  const buttonIcon = (isUploaded || isQueued) ? 'üîÑ' : 'üì∑';
                  const buttonClass = (isQueued || isUploaded) ? 'retake' : '';
                  const statusLabel = isUploaded ? '(‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß)' : (isQueued ? '(‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß)' : '');

                  return (
                    <div key={topic} className="topic-list-item">
                      <span className="topic-list-item-status">
                        {statusIcon}
                      </span>
                      <span className="topic-list-item-name">
                        {topic} <span style={{color: '#888', fontSize: '0.8em'}}>{statusLabel}</span>
                      </span>
                      <button
                        className={`topic-list-item-button ${buttonClass}`}
                        onClick={() => handleStartPhotoForTopic(topic)}
                      >
                        {buttonIcon}
                      </button>
                    </div>
                  );
                })}
              </div>

              <button
                className="upload-all-button"
                disabled={photoQueue.size === 0 || isUploading}
                onClick={handleUploadAll}
              >
                üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ({photoQueue.size}) ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
              </button>
            </>
          )}

          <div className="wizard-nav">
            <button className="wizard-button secondary" onClick={goBack}>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</button>
          </div>
        </div>
      )}

      {step === 'dailyReview' && (
        <div className="wizard-step">
          <h2>üìù ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ & ‡∏Ñ‡∏≥‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢ (Daily)</h2>

          {/* ‡πÉ‡∏ä‡πâ List Layout ‡πÉ‡∏´‡∏°‡πà */}
          <div className="daily-review-list"> {/* <-- ‡πÉ‡∏ä‡πâ Class ‡πÉ‡∏´‡∏°‡πà */}
             {photoQueue.size > 0 ? Array.from(photoQueue.entries()).map(renderDailyReviewItem) : null}
          </div>

          {photoQueue.size === 0 && ( <p style={{textAlign: 'center', color: '#888', margin: '40px 0'}}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢</p> )}

          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° */}
          <button
            className="upload-all-button"
            onClick={handleUploadAll}
            disabled={isUploading || photoQueue.size === 0}
          >
            üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({photoQueue.size}) ‡∏£‡∏π‡∏õ
          </button>
          <div className="wizard-nav" style={{ justifyContent: 'center', borderTop: 'none', paddingTop: '10px' }}>
            <button className="wizard-button secondary" onClick={() => setStep('camera')}>
               üì∑ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÄ‡∏û‡∏¥‡πà‡∏°
            </button>
          </div>
        </div>
      )}

    {/* 6. Step: ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢) */}
      {step === 'camera' && (
        <div className="camera-view-container">
          <div className="camera-topic-overlay">
            {reportType === 'QC' ? currentTopic : '‚òÄÔ∏è ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô'}
            {/* [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Daily */}
            {reportType === 'Daily' && photoQueue.size > 0 &&
              ` (${photoQueue.size} ‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß)`
            }
          </div>
          {tempPhoto ? (
            <img src={tempPhoto} alt="Captured" className="photo-preview" />
          ) : (
            // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ Callback Ref
            <video ref={videoCallbackRef} autoPlay playsInline className="video-feed"></video>
          )}
          {/* canvas ‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ‡πÅ‡∏ï‡πà‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ */}
          <canvas ref={canvasRef} style={{ display: 'none' }}></canvas>
          <div className="camera-controls">
            {tempPhoto ? (
              <>
                <button onClick={handleRetake} className="retake-button">‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà</button>
                <button onClick={handleConfirmPhoto} className="confirm-button">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ</button>
              </>
            ) : (
              <>
                <button onClick={goBack} className="retake-button">
                    {reportType === 'QC' ? '‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö' : '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'}
                 </button>
                <button onClick={takePhoto} className="capture-button"></button>
                {/* [‡πÉ‡∏´‡∏°‡πà] ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Review ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Daily */}
                {reportType === 'Daily' && photoQueue.size > 0 ? (
                  <button onClick={() => setStep('dailyReview')} className="review-button" title="‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ"> {/* <-- ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° Class ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô CSS */}
                    üìù ({photoQueue.size})
                  </button>
                ) : (
                  <div style={{width: '90px'}}></div> /* Spacer */
                )}
              </>
            )}
          </div>
        </div>
      )}

    {/* 7. Step: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏∏‡πà‡∏° "‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç") */}
    {step === 'uploading' && (
      <div className="wizard-step" style={{textAlign: 'center', paddingTop: '100px'}}>
        <h2>{uploadStatus}</h2>
        {isUploading && <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...</p>}
        {!isUploading && uploadStatus.includes('‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß') && (
          // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ñ‡πâ‡∏≤ Daily ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Review
          <button className="wizard-button" onClick={() => setStep(reportType === 'QC' ? 'topicList' : 'dailyReview')}>
            ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
          </button>
        )}
      </div>
    )}

    </div>
  );
};

export default Camera;
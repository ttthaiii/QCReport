// Filename: src/components/Camera.tsx (REPLACED - V5 - Persistent State)

import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';
import { api, UploadPhotoData, ProjectConfig } from '../utils/api';
import { addWatermark, WatermarkOptions } from '../utils/watermark';
import './Camera.css';

interface CameraProps {
  qcTopics: ProjectConfig | null;
  projectId: string;
  projectName: string | undefined;
}

interface Geolocation {
  latitude: number;
  longitude: number;
}

// 1. [‡πÉ‡∏´‡∏°‡πà] ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á" ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô localStorage
interface PersistentJob {
  id: string;
  label: string;
  reportType: 'QC' | 'Daily';
  mainCategory: string;
  subCategory: string;
  dynamicFields: Record<string, string>;
  description: string;
  completedTopics: number; // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°]
  totalTopics: number;     // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°]
}

// 2. [‡πÉ‡∏´‡∏°‡πà] Helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö localStorage
const RECENT_JOBS_KEY = 'qc-recent-jobs';

const getRecentJobs = (projectId: string): PersistentJob[] => { // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
  try {
    const data = localStorage.getItem(`${RECENT_JOBS_KEY}_${projectId}`);
    return data ? JSON.parse(data) : [];
  } catch (e) {
    return [];
  }
};

async function reverseGeocodeNominatim(latitude: number, longitude: number): Promise<string> {
  const url = `https://nominatim.openstreetmap.org/reverse?lat=${latitude}&lon=${longitude}&format=json&accept-language=th&zoom=18&addressdetails=1`;
  
  try {
    const response = await fetch(url, {
      headers: {
        // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        // ‚ùóÔ∏è ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô [your_email@example.com] ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö
        'User-Agent': 'QCReport-App/1.0 (Contact: [thai.l@tts2004.co.th] for issues)'
      }
    });
    
    const data = await response.json();
    
    if (data && data.address) {
      const addr = data.address;
      
      const district = addr.district || addr.city_district || addr.town || addr.municipality;
      const province = addr.state || addr.province;

      if (district && province) {
        return `${district}\n${province}`;
      } else if (province) {
        return province;
      } else if (district) {
        return district;
      }
      
      return data.display_name.split(',').slice(0, 3).join(', ');
    } else {
      return `‡∏û‡∏¥‡∏Å‡∏±‡∏î: ${latitude.toFixed(4)}, ${longitude.toFixed(4)}`;
    }
  } catch (error) {
    console.error('Error fetching Nominatim:', error);
    return `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà`; // ‚¨ÖÔ∏è ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà" ‡∏Ñ‡∏£‡∏±‡∏ö
  }
}

const saveRecentJob = ( // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  projectId: string,
  job: Omit<PersistentJob, 'completedTopics' | 'totalTopics'>, // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
  completedTopics: number, // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] Parameter
  totalTopics: number      // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] Parameter
) => {
  const jobs = getRecentJobs(projectId);
  const otherJobs = jobs.filter(j => j.id !== job.id);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  const jobToSave: PersistentJob = { // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏ó‡∏µ‡πà‡∏°‡∏µ Progress
      ...job,
      completedTopics,
      totalTopics
  };

  const updatedJobs = [jobToSave, ...otherJobs].slice(0, 5);
  localStorage.setItem(`${RECENT_JOBS_KEY}_${projectId}`, JSON.stringify(updatedJobs));
};

// 3. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á Wizard (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
type WizardStep = 
  | 'type'          // 1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  | 'mainCat'       // 2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Main Category
  | 'subCat'        // 3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sub Category
  | 'dynamicFields' // 4. ‡∏Å‡∏£‡∏≠‡∏Å Dynamic Fields
  | 'topicList'     // 5. ‡∏´‡∏ô‡πâ‡∏≤ Checklist ‡∏Ç‡∏≠‡∏á Topics
  | 'dailyReview'     // 5b. (Daily) ‡∏Å‡∏£‡∏≠‡∏Å Description
  | 'camera'        // 6. ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
  | 'uploading';    // 7. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î

const Camera: React.FC<CameraProps> = ({ qcTopics, projectId, projectName }) => {
  // --- State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Wizard ---
  const [step, setStep] = useState<WizardStep>('type');
  const cameraInputRef = useRef<HTMLInputElement>(null);
  const [isProcessingPhoto, setIsProcessingPhoto] = useState<boolean>(false);
  // --- State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ ---
  const [photoQueue, setPhotoQueue] = useState<Map<string, string>>(new Map()); 
  const [currentTopic, setCurrentTopic] = useState<string>(''); 
  const [isUploading, setIsUploading] = useState<boolean>(false);
  const [uploadStatus, setUploadStatus] = useState<string>('');

  // --- 4. [‡πÉ‡∏´‡∏°‡πà] State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á" ---
  const [recentJobs, setRecentJobs] = useState<PersistentJob[]>([]); // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] State ‡πÉ‡∏´‡∏°‡πà
  const [uploadedStatus, setUploadedStatus] = useState<Map<string, boolean>>(new Map()); // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] State ‡πÉ‡∏´‡∏°‡πà
  const [isChecklistLoading, setIsChecklistLoading] = useState(false);

  // --- State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
  const [selectedMainCategory, setSelectedMainCategory] = useState<string>('');
  const [selectedSubCategory, setSelectedSubCategory] = useState<string>('');
  const [reportType, setReportType] = useState<'QC' | 'Daily'>('QC');
  const [dailyDescriptions, setDailyDescriptions] = useState<Map<string, string>>(new Map());
  const [dynamicFields, setDynamicFields] = useState<{ [key: string]: string }>({});

  // --- Logic ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
  const mainCategories = useMemo(() => qcTopics ? Object.keys(qcTopics) : [], [qcTopics]);
  const subCategories = useMemo(() =>
    (qcTopics && selectedMainCategory && qcTopics[selectedMainCategory])
      ? Object.keys(qcTopics[selectedMainCategory])
      : [],
    [qcTopics, selectedMainCategory]);
  const currentSubCategoryConfig = useMemo(() => {
    if (qcTopics && selectedMainCategory && selectedSubCategory) {
      return qcTopics[selectedMainCategory]?.[selectedSubCategory];
    }
    return { topics: [], dynamicFields: [] };
  }, [qcTopics, selectedMainCategory, selectedSubCategory]);
  const topics = currentSubCategoryConfig?.topics || [];
  const requiredDynamicFields = currentSubCategoryConfig?.dynamicFields || [];

  useEffect(() => { setRecentJobs(getRecentJobs(projectId)); }, [projectId]);

  // 6. [‡πÉ‡∏´‡∏°‡πà] Helper: ‡∏™‡∏£‡πâ‡∏≤‡∏á Label ‡πÅ‡∏•‡∏∞ ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "Job"
  const getCurrentJobIdentifier = (): { id: string, label: string } => { // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
    if (reportType === 'QC') {
      const fieldValues = Object.values(dynamicFields).filter(Boolean).join('_') || 'default';
      const id = `${selectedMainCategory}_${selectedSubCategory}_${fieldValues}`;
      const label = [selectedMainCategory, selectedSubCategory, ...Object.values(dynamicFields).filter(Boolean)].join(' / ');
      return { id, label: `üìã ${label}` };
    } else {
      // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ Daily ‡∏°‡∏µ ID ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
      const dateStr = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
      return { id: `daily_${dateStr}`, label: '‚òÄÔ∏è ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô' };
    }
  };

  // 7. [‡πÉ‡∏´‡∏°‡πà] Logic: ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Checklist ‡∏à‡∏≤‡∏Å API ---
  const fetchChecklistStatus = useCallback(async ( // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
    mainCat: string,
    subCat: string,
    fields: Record<string, string>
  ) => {
    if (!mainCat || !subCat) return;

    setIsChecklistLoading(true);
    setUploadedStatus(new Map()); // ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡πà‡∏≤
    try {
      const response = await api.getChecklistStatus(projectId, mainCat, subCat, fields);
      if (response.success && response.data) {
        setUploadedStatus(new Map(Object.entries(response.data)));
      } else {
        throw new Error(response.error || 'Failed to fetch status');
      }
    } catch (error) {
      console.error('Error fetching checklist status:', error);
      alert(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô: ${(error as Error).message}`);
    }
    setIsChecklistLoading(false);
  }, [projectId]);

  // 8. [‡πÉ‡∏´‡∏°‡πà] Effect: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ô‡∏µ‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ topicList
  useEffect(() => { // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] Effect ‡πÉ‡∏´‡∏°‡πà
    if (step === 'topicList') {
      fetchChecklistStatus(selectedMainCategory, selectedSubCategory, dynamicFields);
    }
  }, [step, selectedMainCategory, selectedSubCategory, dynamicFields, fetchChecklistStatus]);
  
  const processNativePhoto = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (readerEvent) => {
        const img = new Image();
        img.onload = () => {
          const MAX_WIDTH = 1600;
          const { width, height } = img;
          if (width <= MAX_WIDTH) {
            resolve(img.src);
            return;
          }
          const ratio = MAX_WIDTH / width;
          const newHeight = height * ratio;
          const canvas = document.createElement('canvas');
          canvas.width = MAX_WIDTH;
          canvas.height = newHeight;
          const ctx = canvas.getContext('2d');
          if (!ctx) {
            return reject(new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á canvas context ‡πÑ‡∏î‡πâ'));
          }
          ctx.drawImage(img, 0, 0, MAX_WIDTH, newHeight);
          const resizedBase64 = canvas.toDataURL('image/jpeg', 0.9);
          resolve(resizedBase64);
        };
        img.onerror = (err) => reject(new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î Image object ‡πÑ‡∏î‡πâ'));
        img.src = readerEvent.target?.result as string;
      };
      reader.onerror = (err) => reject(new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'));
      reader.readAsDataURL(file);
    });
  };

  // --- [‡πÉ‡∏´‡∏°‡πà] Function ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Native Camera ‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à ---
  const handleNativeFileSelected = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (event.target) {
      event.target.value = "";
    }
    if (!file) return;

    setIsProcessingPhoto(true);

    try {
      const photoBase64 = await processNativePhoto(file);
      const newQueue = new Map(photoQueue);

      if (reportType === 'QC' && currentTopic) {
          // --- QC Flow ---
          newQueue.set(currentTopic, photoBase64);
          setPhotoQueue(newQueue);
          setCurrentTopic(''); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå topic
      } else if (reportType === 'Daily' && step === 'camera') {
          // --- Daily Flow ---
          const timestampKey = `daily_${Date.now()}`;
          newQueue.set(timestampKey, photoBase64);
          setPhotoQueue(newQueue);
          // ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ 'camera'
      }

    } catch (error) {
      console.error("Error processing native photo:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ: " + (error as Error).message);
    } finally {
      setIsProcessingPhoto(false);
    }
  };

  // 9. [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] Logic ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---
  const handleUploadAll = async () => {
    if (photoQueue.size === 0) return;
    setIsUploading(true); setUploadStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î 0/${photoQueue.size}...`); setStep('uploading');
   
    // [‡πÉ‡∏´‡∏°‡πà] ‡∏î‡∏∂‡∏á Location ‡∏™‡∏î‡πÜ ‡∏ï‡∏≠‡∏ô‡∏Å‡∏î‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    let locationString = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ'; // ‚¨ÖÔ∏è ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ watermark
    try {
      // 1. ‡∏î‡∏∂‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
      const position = await new Promise<GeolocationPosition>((resolve, reject) => {
        navigator.geolocation.getCurrentPosition(resolve, reject, { 
          enableHighAccuracy: true, 
          timeout: 10000 
        });
      });

      // 2. [‡πÉ‡∏´‡∏°‡πà] ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Nominatim ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î
      locationString = await reverseGeocodeNominatim(
        position.coords.latitude,
        position.coords.longitude
      );
      
    } catch (geoError) {
      console.warn('Could not get geolocation or geocode:', geoError);
      locationString = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ'; // Fallback
    }
    // [‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà]

    let successCount = 0; const totalPhotosInQueue = photoQueue.size; const topicsJustUploaded = new Map<string, boolean>();

    try {
      const photosToUpload = Array.from(photoQueue.entries());

      for (const [key, photoBase64] of photosToUpload) {
        if (!photoBase64) continue;

        setUploadStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${successCount + 1}/${totalPhotosInQueue}...`);
        const timestamp = new Date().toISOString();
        const watermarkOptions: WatermarkOptions = { location: locationString, timestamp: timestamp }; // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ locationString
        const watermarkedPhoto = await addWatermark(photoBase64, watermarkOptions);
        setUploadStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${successCount + 1}/${totalPhotosInQueue}...`);

        let descriptionForUpload = '';
        if (reportType === 'Daily') {
          descriptionForUpload = dailyDescriptions.get(key) || '';
        }

        const uploadData: UploadPhotoData = {
          projectId, projectName: projectName || 'N/A', reportType, photoBase64: watermarkedPhoto, timestamp, 
          location: locationString, // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ locationString
          ...(reportType === 'QC'
            ? { mainCategory: selectedMainCategory, subCategory: selectedSubCategory, topic: key, dynamicFields }
            : { description: descriptionForUpload, dynamicFields: {} }
          ),
        };

        const response = await api.uploadPhoto(uploadData);
        if (!response.success) throw new Error(`‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏µ‡πà‡∏£‡∏π‡∏õ: ${reportType === 'QC' ? key : `Daily Photo ${successCount + 1}`} (${response.error})`);

        if (reportType === 'QC') {
            topicsJustUploaded.set(key, true);
        }
        successCount++;
      }

      // --- Logic ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° V5) ---
      setUploadStatus(`‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${successCount} ‡∏£‡∏π‡∏õ!`);
      const newUploadedStatus = new Map(uploadedStatus); topicsJustUploaded.forEach((value, key) => newUploadedStatus.set(key, value));
      const completedCount = newUploadedStatus.size; const totalTopicCount = topics.length;
      const { id, label } = getCurrentJobIdentifier();

      if (reportType === 'QC') {
        saveRecentJob(projectId, { id, label, reportType, mainCategory: selectedMainCategory, subCategory: selectedSubCategory, dynamicFields, description: '' }, completedCount, totalTopicCount);
        setRecentJobs(getRecentJobs(projectId));
      }

      setTimeout(() => {
        setPhotoQueue(new Map());
        setDailyDescriptions(new Map());
        setIsUploading(false); setUploadStatus('');
        setUploadedStatus(newUploadedStatus);
        setStep('type');
      }, 2000);

    } catch (error) { console.error('Upload failed:', error); setUploadStatus(`‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${(error as Error).message}`); setIsUploading(false); }
  };


  // --- Logic ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Wizard ---
  const resetAllState = () => {
    // [‡∏•‡∏ö] setTempPhoto(null)
    setPhotoQueue(new Map()); setCurrentTopic(''); setUploadStatus('');
    setDailyDescriptions(new Map());
    setSelectedMainCategory(''); setSelectedSubCategory(''); setDynamicFields({});
    setUploadedStatus(new Map()); setStep('type'); setRecentJobs(getRecentJobs(projectId));
  };

  const handleDynamicFieldChange = (fieldName: string, value: string) => {
    setDynamicFields(prev => ({ ...prev, [fieldName]: value }));
  };

  const handleSelectReportType = (type: 'QC' | 'Daily') => { // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] Daily ‡πÑ‡∏õ Camera
      resetAllState();
      setReportType(type);
      if (type === 'QC') setStep('mainCat');
      else setStep('camera'); // <-- ‡πÑ‡∏õ Camera ‡πÄ‡∏•‡∏¢
  };

  const handleSelectMainCat = (mainCat: string) => {
    setSelectedMainCategory(mainCat);
    setSelectedSubCategory('');
    setPhotoQueue(new Map());
    setUploadedStatus(new Map());
    setStep('subCat');
  };

  const handleSelectSubCat = (subCat: string) => {
    setSelectedSubCategory(subCat);
    setPhotoQueue(new Map());
    setUploadedStatus(new Map());
    
    const config = qcTopics?.[selectedMainCategory]?.[subCat];
    if (config?.dynamicFields && config.dynamicFields.length > 0) {
      setStep('dynamicFields');
    } else {
      setStep('topicList');
    }
  };

  const handleDynamicFieldsSubmit = () => {
    setPhotoQueue(new Map());
    setUploadedStatus(new Map());
    setStep('topicList');
  };
  
  const handleStartPhotoForTopic = (topic: string) => {
    setCurrentTopic(topic);
    cameraInputRef.current?.click(); // <-- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á Native ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    // [‡∏•‡∏ö] setStep('camera');
  };

  // --- [‡πÉ‡∏´‡∏°‡πà] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Daily Description ---
  const handleDailyDescriptionChange = (photoKey: string, text: string) => {
    const newDescriptions = new Map(dailyDescriptions); // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ State ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    newDescriptions.set(photoKey, text);
    setDailyDescriptions(newDescriptions); // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ State ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  };

  // --- [‡πÉ‡∏´‡∏°‡πà] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏£‡∏π‡∏õ Daily ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß ---
  const handleDeleteDailyPhoto = (photoKey: string) => {
    const newQueue = new Map(photoQueue);
    const newDescriptions = new Map(dailyDescriptions); // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ State ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    newQueue.delete(photoKey);
    newDescriptions.delete(photoKey);
    setPhotoQueue(newQueue);
    setDailyDescriptions(newDescriptions); // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ State ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  };

  // 10. [‡πÉ‡∏´‡∏°‡πà] ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Job" ‡∏à‡∏≤‡∏Å localStorage
  const handleSelectRecentJob = (job: PersistentJob) => {
    if (job.reportType === 'QC') {
        setReportType('QC'); setSelectedMainCategory(job.mainCategory); setSelectedSubCategory(job.subCategory); setDynamicFields(job.dynamicFields);
        setPhotoQueue(new Map()); setUploadedStatus(new Map()); setStep('topicList');
    } else {
        setReportType('Daily');
        // setDescription(job.description || ''); // <-- [‡∏•‡∏ö] ‡πÑ‡∏°‡πà‡∏°‡∏µ State description ‡∏ï‡∏±‡∏ß‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß
        setPhotoQueue(new Map()); setDailyDescriptions(new Map()); // <-- ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå Map ‡πÅ‡∏ó‡∏ô
        setStep('camera');
    }
  };

  const goBack = () => {
    if (isUploading) return;
    switch (step) {
      case 'mainCat': setStep('type'); break;
      case 'subCat': setStep('mainCat'); break;
      case 'dynamicFields': setStep('subCat'); break;
      case 'topicList': setStep('type'); break;
      case 'dailyReview': setStep('camera'); break;
      case 'camera':
        // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Daily ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (QC ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß)
        setStep('type');
        break;
      default:
        setStep('type');
    }
  };

  // --- Render ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Wizard ---
  const renderChecklistHeader = () => {
    if (reportType === 'QC') {
      const parts = [selectedMainCategory, selectedSubCategory, ...Object.values(dynamicFields)];
      return <div className="checklist-header">{parts.filter(Boolean).join(' / ')}</div>;
    }
    return null;
  };

  const renderDailyReviewItem = ([key, photoBase64]: [string, string]) => (
    <div key={key} className="daily-review-item"> {/* <-- ‡πÉ‡∏ä‡πâ Class ‡πÉ‡∏´‡∏°‡πà */}
      <img src={photoBase64} alt={`Daily ${key}`} className="daily-review-thumbnail" /> {/* <-- ‡πÉ‡∏ä‡πâ Class ‡πÉ‡∏´‡∏°‡πà */}
      <textarea
        value={dailyDescriptions.get(key) || ''}
        onChange={(e) => handleDailyDescriptionChange(key, e.target.value)}
        placeholder="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢ (Optional)..."
        rows={3} // <-- ‡∏•‡∏î rows ‡∏•‡∏á‡πÑ‡∏î‡πâ
        className="daily-review-textarea" // <-- ‡πÉ‡∏ä‡πâ Class ‡πÉ‡∏´‡∏°‡πà
      />
      <button onClick={() => handleDeleteDailyPhoto(key)} className="daily-review-delete-button">üóëÔ∏è</button> {/* <-- ‡πÉ‡∏ä‡πâ Class ‡πÉ‡∏´‡∏°‡πà, ‡πÄ‡∏≠‡∏≤‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ ‡∏•‡∏ö ‡∏≠‡∏≠‡∏Å */}
    </div>
  );

  return (
    <div className="wizard-container">

      <input
        ref={cameraInputRef}
        type="file"
        accept="image/*"
        capture="environment"
        style={{ display: 'none' }}
        onChange={handleNativeFileSelected}
      />

      {/* --- [‡πÉ‡∏´‡∏°‡πà] Global Loading Overlay (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ) --- */}
      {isProcessingPhoto && (
        // (‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° CSS .global-loading-overlay ‡πÄ‡∏≠‡∏á)
        <div style={{
            position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.7)', zIndex: 9999,
            display: 'flex', alignItems: 'center', justifyContent: 'center', color: 'white'
          }}>
          <div style={{textAlign: 'center'}}>
            <h3>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ...</h3>
            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...</p>
          </div>
        </div>
      )}

      {/* 1. Step: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) */}
      {step === 'type' && (
        <div className="wizard-step">
          <h2>1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</h2>
          <div className="selection-grid">
            <div className="selection-card" onClick={() => handleSelectReportType('QC')}>
              <span style={{fontSize: '2rem'}}>üìã</span>
              <p>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô QC (‡∏ï‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠)</p>
            </div>
            <div className="selection-card daily" onClick={() => handleSelectReportType('Daily')}>
              <span style={{fontSize: '2rem'}}>‚òÄÔ∏è</span>
              <p>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô (Daily)</p>
            </div>
          </div>

          {/* --- 11. [‡πÉ‡∏´‡∏°‡πà] ‡πÅ‡∏™‡∏î‡∏á "‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á" --- */}
          {recentJobs.length > 0 && (
            <div className="recent-jobs-container">
              <h3>üìå ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà</h3>
              {recentJobs.map((job) => (
                <div
                  key={job.id}
                  className="recent-job-item"
                  onClick={() => handleSelectRecentJob(job)} // <-- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ handleSelectRecentJob
                >
                  {/* ‡πÅ‡∏™‡∏î‡∏á Label */}
                  <span>{job.label}</span>
                  {/* ‡πÅ‡∏™‡∏î‡∏á Progress ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ QC ‡πÅ‡∏•‡∏∞‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
                  {job.reportType === 'QC' && job.totalTopics > 0 && (
                     <span className="job-progress">
                       (‡∏ñ‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß {job.completedTopics}/{job.totalTopics})
                     </span>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {/* 2. Step: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Main Category */}
      {step === 'mainCat' && (
        <div className="wizard-step">
          <h2>2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å</h2>
          {renderChecklistHeader()}
          <div className="selection-grid">
            {mainCategories.map((mainCat) => (
              <div key={mainCat} className="selection-card" onClick={() => handleSelectMainCat(mainCat)}>
                {mainCat}
              </div>
            ))}
          </div>
          <div className="wizard-nav">
            <button className="wizard-button secondary" onClick={goBack}>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</button>
          </div>
        </div>
      )}
      
      {/* 3. Step: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sub Category */}
      {step === 'subCat' && (
        <div className="wizard-step">
          <h2>3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢</h2>
          {renderChecklistHeader()}
          <div className="selection-grid">
            {subCategories.map((subCat) => (
              <div key={subCat} className="selection-card" onClick={() => handleSelectSubCat(subCat)}>
                {subCat}
              </div>
            ))}
          </div>
          <div className="wizard-nav">
            <button className="wizard-button secondary" onClick={goBack}>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</button>
          </div>
        </div>
      )}

      {/* 4. Step: ‡∏Å‡∏£‡∏≠‡∏Å Dynamic Fields */}
      {step === 'dynamicFields' && (
        <div className="wizard-step">
          <h2>4. ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</h2>
          {renderChecklistHeader()}
          {requiredDynamicFields.map((fieldName) => (
            <div className="form-group" key={fieldName}>
              <label>{fieldName}</label>
              <input
                type="text"
                value={dynamicFields[fieldName] || ''}
                onChange={(e) => handleDynamicFieldChange(fieldName, e.target.value)}
                placeholder={`‡∏£‡∏∞‡∏ö‡∏∏${fieldName}...`}
              />
            </div>
          ))}
          <div className="wizard-nav">
            <button className="wizard-button secondary" onClick={goBack}>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</button>
            <button className="wizard-button" onClick={handleDynamicFieldsSubmit}>‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</button>
          </div>
        </div>
      )}

      {/* 5. [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] Step: Topic Checklist */}
      {step === 'topicList' && (
        <div className="wizard-step">
          <h2>5. ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ï‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠</h2>
          {renderChecklistHeader()}

          {isChecklistLoading ? ( // <-- [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡πÅ‡∏™‡∏î‡∏á Loading ‡∏ï‡∏≠‡∏ô‡∏£‡∏≠ API
            <div className="loading-container" style={{height: '50vh'}}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞...</div>
          ) : (
            <>
              <div className="topic-list">
                {topics.map((topic) => {
                  // 10. [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] Logic ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‚úÖ/üîÑ/‚ö™Ô∏è
                  const isQueued = photoQueue.has(topic); // ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏£‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
                  const isUploaded = uploadedStatus.has(topic); // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏≤‡∏Å API)

                  const statusIcon = isUploaded ? '‚úÖ' : (isQueued ? 'üîÑ' : '‚ö™Ô∏è');
                  // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà (üîÑ) ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà üì∑
                  const buttonIcon = (isUploaded || isQueued) ? 'üîÑ' : 'üì∑';
                  const buttonClass = (isQueued || isUploaded) ? 'retake' : '';
                  const statusLabel = isUploaded ? '(‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß)' : (isQueued ? '(‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß)' : '');

                  return (
                    <div key={topic} className="topic-list-item">
                      <span className="topic-list-item-status">
                        {statusIcon}
                      </span>
                      <span className="topic-list-item-name">
                        {topic} <span style={{color: '#888', fontSize: '0.8em'}}>{statusLabel}</span>
                      </span>
                      <button
                        className={`topic-list-item-button ${buttonClass}`}
                        onClick={() => handleStartPhotoForTopic(topic)}
                      >
                        {buttonIcon}
                      </button>
                    </div>
                  );
                })}
              </div>

              <button
                className="upload-all-button"
                disabled={photoQueue.size === 0 || isUploading}
                onClick={handleUploadAll}
              >
                üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ({photoQueue.size}) ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
              </button>
            </>
          )}

          <div className="wizard-nav">
            <button className="wizard-button secondary" onClick={goBack}>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</button>
          </div>
        </div>
      )}

      {step === 'dailyReview' && (
        <div className="wizard-step">
          <h2>üìù ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ & ‡∏Ñ‡∏≥‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢ (Daily)</h2>

          {/* ‡πÉ‡∏ä‡πâ List Layout ‡πÉ‡∏´‡∏°‡πà */}
          <div className="daily-review-list"> {/* <-- ‡πÉ‡∏ä‡πâ Class ‡πÉ‡∏´‡∏°‡πà */}
             {photoQueue.size > 0 ? Array.from(photoQueue.entries()).map(renderDailyReviewItem) : null}
          </div>

          {photoQueue.size === 0 && ( <p style={{textAlign: 'center', color: '#888', margin: '40px 0'}}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢</p> )}

          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° */}
          <button
            className="upload-all-button"
            onClick={handleUploadAll}
            disabled={isUploading || photoQueue.size === 0}
          >
            üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({photoQueue.size}) ‡∏£‡∏π‡∏õ
          </button>
          <div className="wizard-nav" style={{ justifyContent: 'center', borderTop: 'none', paddingTop: '10px' }}>
            <button className="wizard-button secondary" onClick={() => setStep('camera')}>
               üì∑ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÄ‡∏û‡∏¥‡πà‡∏°
            </button>
          </div>
        </div>
      )}

    {/* 6. Step: ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢) */}
      {step === 'camera' && (
        // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ .wizard-step ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤ Layout V5 ‡πÄ‡∏î‡∏¥‡∏°
        <div className="wizard-step" style={{ display: 'flex', flexDirection: 'column' }}>
          <h2>‚òÄÔ∏è ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô</h2>
          <p style={{ textAlign: 'center', color: '#666', marginBottom: '30px' }}>
            ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á<br/>
            ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          </p>

          {/* [‡πÉ‡∏´‡∏°‡πà] UI ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡πà‡∏≤‡∏¢ */}
          <div style={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
            <button 
              className="wizard-button" // <-- ‡πÉ‡∏ä‡πâ‡∏™‡πÑ‡∏ï‡∏•‡πå .wizard-button ‡πÄ‡∏î‡∏¥‡∏°
              style={{
                padding: '20px 40px',
                fontSize: '1.5rem',
                height: 'auto',
                lineHeight: '1.5'
              }}
              onClick={() => cameraInputRef.current?.click()}
            >
              <span style={{ fontSize: '2.5rem' }}>üì∑</span>
              <br/>
              ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ
            </button>
          </div>
          
          <p style={{ textAlign: 'center', color: '#666', marginTop: '30px' }}>
            ‡∏°‡∏µ {photoQueue.size} ‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß
          </p>

          {/* [‡πÉ‡∏´‡∏°‡πà] Navigation ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ .wizard-nav (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô V5) */}
          <div className="wizard-nav">
            <button className="wizard-button secondary" onClick={goBack}>
              ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            </button>
            
            {photoQueue.size > 0 ? (
              <button 
                className="wizard-button" 
                onClick={() => setStep('dailyReview')}
                title="‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢"
              >
                üìù ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ ({photoQueue.size})
              </button>
            ) : (
              // Spacer (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° '‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö' ‡∏≠‡∏¢‡∏π‡πà‡∏ã‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î)
              <div style={{minWidth: '120px', display: 'inline-block'}}></div> 
            )}
          </div>
        </div>
      )}

    {/* 7. Step: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏∏‡πà‡∏° "‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç") */}
    {step === 'uploading' && (
      <div className="wizard-step" style={{textAlign: 'center', paddingTop: '100px'}}>
        <h2>{uploadStatus}</h2>
        {isUploading && <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...</p>}
        {!isUploading && uploadStatus.includes('‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß') && (
          // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ñ‡πâ‡∏≤ Daily ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Review
          <button className="wizard-button" onClick={() => setStep(reportType === 'QC' ? 'topicList' : 'dailyReview')}>
            ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
          </button>
        )}
      </div>
    )}

    </div>
  );
};

export default Camera;
// ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå src/utils/watermark.js
// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Portrait ‡πÅ‡∏•‡∏∞ Landscape ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ + ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô

export function addWatermark(imageFile, watermarkText, location = '') {
  return new Promise((resolve, reject) => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const img = new Image();
    
    img.onload = () => {
      try {
        // üî• ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 1600x1200 ‡πÅ‡∏•‡πâ‡∏ß (‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô)
        const imageWidth = img.width;
        const imageHeight = img.height;
        
        console.log(`Watermark input: ${imageWidth}x${imageHeight}`);
        
        // ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö)
        canvas.width = imageWidth;
        canvas.height = imageHeight;
        
        // Fill background with white
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(0, 0, imageWidth, imageHeight);
        
        // Draw image (maintain original size)
        ctx.drawImage(img, 0, 0, imageWidth, imageHeight);
        
        // üî• Watermark size ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å
        const fontSize = Math.floor(Math.min(imageWidth, imageHeight) / 50); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 65 ‡πÄ‡∏õ‡πá‡∏ô 50 (‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏µ‡∏Å ~30%)
        ctx.font = `bold ${fontSize}px Arial, sans-serif`; // ‡πÄ‡∏û‡∏¥‡πà‡∏° bold
        ctx.fillStyle = 'rgba(255, 255, 255, 0.95)';
        ctx.strokeStyle = 'rgba(0, 0, 0, 0.9)'; // ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
        ctx.lineWidth = Math.max(3, Math.floor(fontSize / 8)); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á stroke
        
        // Position watermark at bottom-right
        const padding = Math.floor(imageWidth / 50); // ‡∏õ‡∏£‡∏±‡∏ö padding ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏ç‡πà
        const lineHeight = fontSize + 6; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        
        // Parse location ‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡πà‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
        const locationLines = parseLocationToLines(location);
        const lines = [watermarkText, ...locationLines].filter(Boolean);
        
        // ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô)
        lines.forEach((line, index) => {
          const y = imageHeight - padding - ((lines.length - 1 - index) * lineHeight);
          const textWidth = ctx.measureText(line).width;
          const x = imageWidth - textWidth - padding;
          
          // Draw text with outline (stroke ‡∏Å‡πà‡∏≠‡∏ô fill)
          ctx.strokeText(line, x, y);
          ctx.fillText(line, x, y);
        });
        
        // üî• ‡πÄ‡∏û‡∏¥‡πà‡∏° shadow effect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡πà‡∏ô‡∏ä‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
        ctx.shadowColor = 'rgba(0, 0, 0, 0.6)'; // ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
        ctx.shadowBlur = 3; // ‡πÄ‡∏ö‡∏•‡∏≠‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
        ctx.shadowOffsetX = 2; // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
        ctx.shadowOffsetY = 2;
        
        // Convert to blob
        canvas.toBlob((blob) => {
          if (blob) {
            console.log(`Watermarked image: ${imageWidth}x${imageHeight}, size: ${blob.size} bytes, fontSize: ${fontSize}px`);
            resolve(blob);
          } else {
            reject(new Error('Failed to create blob from canvas'));
          }
        }, 'image/jpeg', 0.92); // ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á
        
      } catch (error) {
        reject(error);
      }
    };
    
    img.onerror = () => {
      reject(new Error('Failed to load image'));
    };
    
    // Create object URL from blob/file
    if (imageFile instanceof Blob || imageFile instanceof File) {
      img.src = URL.createObjectURL(imageFile);
    } else {
      reject(new Error('Invalid image file type'));
    }
  });
}

// ‡πÅ‡∏¢‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö: ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô, ‡∏ï‡∏≥‡∏ö‡∏•, ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠, ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
function parseLocationToLines(location) {
  if (!location || location.trim() === '') return [];
  
  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  let cleanLocation = location
    .replace(/‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢|Thailand/gi, '')
    .replace(/\d{5}/, '') // ‡πÄ‡∏•‡∏Ç‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå
    .trim();
  
  // ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ
  const parts = cleanLocation.split(',').map(part => part.trim()).filter(Boolean);
  
  if (parts.length === 0) return [];
  
  // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏ó‡∏¢
  const lines = [];
  const maxLines = 3; // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 4 ‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏ç‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏∞‡∏Å‡∏∞
  
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏™‡πà‡∏ß‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
  if (parts.length <= maxLines) {
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏™‡πà‡∏ß‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    parts.forEach(part => {
      if (part.length > 30) { // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
        const words = part.split(' ');
        let currentLine = '';
        
        words.forEach(word => {
          if ((currentLine + ' ' + word).length > 30) {
            if (currentLine) lines.push(currentLine);
            currentLine = word;
          } else {
            currentLine = currentLine ? currentLine + ' ' + word : word;
          }
        });
        
        if (currentLine) lines.push(currentLine);
      } else {
        lines.push(part);
      }
    });
  } else {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏™‡πà‡∏ß‡∏ô ‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
    const important = parts.slice(-3); // ‡πÄ‡∏≠‡∏≤ 3 ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
    important.forEach(part => {
      if (part.length <= 30) {
        lines.push(part);
      } else {
        // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
        lines.push(part.substring(0, 27) + '...');
      }
    });
  }
  
  // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
  return lines.slice(0, maxLines);
}

// Format current time in Thai
export function formatThaiDateTime() {
  const now = new Date();
  const options = {
    timeZone: 'Asia/Bangkok',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  };
  
  const formatter = new Intl.DateTimeFormat('th-TH', options);
  return formatter.format(now).replace(/\//g, '/');
}